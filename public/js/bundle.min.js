"use strict";function init(){console.log("jquery loaded"),sticky(),windowScrollDown()}function sticky(){$(".sticky").sticky({topSpacing:60})}function windowScrollDown(){var t,o=0;$(window).scroll(function(){t=$(this).scrollTop(),o>t?($(".home-page nav").removeClass("folded"),$(".home-page nav").css("border-bottom","0px solid")):$(".home-page nav").addClass("folded"),o=t,$(window).scrollTop()<1&&$(".home-page nav").addClass("top"),$(window).scrollTop()>1&&$(".home-page nav").removeClass("top"),$(window).scrollTop()>30,$(window).scrollTop()<540&&$(".home-page nav").css("box-shadow","inset 0 -1px 0px 0px rgba(0,0,0,0)"),$(window).scrollTop()>540&&$(".home-page nav").css("box-shadow","inset 0 -1px 0px 0px rgba(0,0,0,0.1)")})}function Account(t){this.getCurrentUser=function(){return t({method:"GET",url:"/api/auth/currentUser"})},this.getUserData=function(o){return t({method:"GET",url:"/api/users/"+o})},this.updateUserData=function(o,e){return t({method:"PUT",url:"/api/users/"+o,data:e})},this.follow=function(o,e){return t({method:"PUT",url:"/api/users/event/follow",data:{currentUser:o,followTarget:e}})}}function Project(t){this.createOne=function(o){return t({method:"POST",url:"/api/projects/",data:o})},this.getAll=function(){return t({method:"GET",url:"/api/projects/all"})},this.getOnePorject=function(o){return t({method:"GET",url:"/api/projects/"+o})},this.deleteOne=function(o){return t({method:"DELETE",url:"/api/projects/"+o})},this.deleteOne=function(o){return t({method:"DELETE",url:"/api/projects/"+o})},this.like=function(o,e){return t({method:"PUT",url:"/api/projects/event/like",data:{projectId:o,likerId:e}})}}function focus(t,o){return function(e){o(function(){t.$broadcast("focusOn",e)},0)}}function homeCtrl(){console.log("homeCtrl loaded")}function authCtrl(t,o,e,n){function r(){o.getToken()&&n.getCurrentUser(o.getToken()).then(function(o){console.log("res @getCurrentUser: ",o.data),t.currentUser=o.data},function(t){e.go("authEntrance")})}console.log("authCtrl loaded"),t.getCurrentUser=function(){r()},t.auth_enter=function(t){console.log("authData: ",t),o.signup(t).then(function(t){o.setToken(t),e.go("dashboard"),console.log("res @auth_enter: ",t.data),r()},function(t){console.log("err @auth_enter: ",t)})},t.authenticate=function(t){o.authenticate(t)},t.logout=function(){o.logout(),e.go("authEntrance")}}function dashboardCtrl(t,o,e,n,r){console.log("dashboardCtrl loaded"),n.getCurrentUser(o.getToken()).then(function(t){r.currentUser||(r.currentUser=t.data),console.log("res @getCurrentUser: ",t.data)},function(t){e.go("home")})}function focusOn(){return function(t,o,e){t.$on("focusOn",function(t,n){n===e.focusOn&&o[0].focus()})}}function toolTip(){return function(t,o,e){angular.element(".tool-tip").on("click mouseleave",hideTooltip),angular.element(".tool-tip").on("mouseenter",showTooltip)}}function hideTooltip(){$(this).tooltip("hide")}function showTooltip(){$(this).tooltip("show")}angular.module("pinchApp",["ui.router","satellizer","ngFileUpload","ngImgCrop"]).config(["$stateProvider","$urlRouterProvider","$authProvider",function(t,o,e){e.facebook({clientId:"298165113849366"}),t.state(home).state(authEntrance).state(dashboard),o.otherwise("/")}]);var home={name:"home",url:"/",views:{main:{templateUrl:"/html/home.html",controller:"homeCtrl"}}},authEntrance={name:"authEntrance",url:"/entrance",views:{main:{templateUrl:"/html/entrance.html",controller:"authCtrl"}}},dashboard={name:"dashboard",url:"/dashboard",views:{main:{templateUrl:"/html/dashboard.html",controller:"dashboardCtrl"}}};$(document).ready(init),Account.$inject=["$http"],Project.$inject=["$http"],focus.$inject=["$rootScope","$timeout"],angular.module("pinchApp").service("Account",Account).service("Project",Project).factory("focus",focus),authCtrl.$inject=["$scope","$auth","$state","Account"],dashboardCtrl.$inject=["$scope","$auth","$state","Account","$rootScope"],angular.module("pinchApp").controller("homeCtrl",homeCtrl).controller("authCtrl",authCtrl).controller("dashboardCtrl",dashboardCtrl),angular.module("pinchApp").directive("focusOn",focusOn),angular.module("pinchApp").directive("toolTip",toolTip);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFtb2R1bGUuanMiLCJtYWluLmpzIiwic2VydmljZXMuanMiLCJjb250cm9sbGVycy9jb250cm9sbGVycy5qcyIsImRpcmVjdGl2ZXMvZm9jdXNPbi5kaXJlY3RpdmUuanMiLCJkaXJlY3RpdmVzL3Rvb2xUaXAuZGlyZWN0aXZlLmpzIl0sIm5hbWVzIjpbImluaXQiLCJjb25zb2xlIiwibG9nIiwic3RpY2t5Iiwid2luZG93U2Nyb2xsRG93biIsIiQiLCJ0b3BTcGFjaW5nIiwic3QiLCJsYXN0U2Nyb2xsVG9wIiwid2luZG93Iiwic2Nyb2xsIiwidGhpcyIsInNjcm9sbFRvcCIsInJlbW92ZUNsYXNzIiwiY3NzIiwiYWRkQ2xhc3MiLCJBY2NvdW50IiwiJGh0dHAiLCJnZXRDdXJyZW50VXNlciIsIm1ldGhvZCIsInVybCIsImdldFVzZXJEYXRhIiwidXJpVXNlcklkIiwidXBkYXRlVXNlckRhdGEiLCJkYXRhIiwiZm9sbG93IiwiY3VycmVudFVzZXIiLCJmb2xsb3dUYXJnZXQiLCJQcm9qZWN0IiwiY3JlYXRlT25lIiwibmV3UG9qZWN0T2JqIiwiZ2V0QWxsIiwiZ2V0T25lUG9yamVjdCIsInByb2plY3RJZCIsImRlbGV0ZU9uZSIsImxpa2UiLCJsaWtlcklkIiwiZm9jdXMiLCIkcm9vdFNjb3BlIiwiJHRpbWVvdXQiLCJuYW1lIiwiJGJyb2FkY2FzdCIsImhvbWVDdHJsIiwiYXV0aEN0cmwiLCIkc2NvcGUiLCIkYXV0aCIsIiRzdGF0ZSIsImdldFRva2VuIiwidGhlbiIsInJlcyIsImVyciIsImdvIiwiYXV0aF9lbnRlciIsImF1dGhEYXRhIiwic2lnbnVwIiwic2V0VG9rZW4iLCJhdXRoZW50aWNhdGUiLCJwcm92aWRlciIsImxvZ291dCIsImRhc2hib2FyZEN0cmwiLCJmb2N1c09uIiwic2NvcGUiLCJlbGVtIiwiYXR0ciIsIiRvbiIsImUiLCJ0b29sVGlwIiwiZWxlbWVudCIsImF0dHJzIiwiYW5ndWxhciIsIm9uIiwiaGlkZVRvb2x0aXAiLCJzaG93VG9vbHRpcCIsInRvb2x0aXAiLCJtb2R1bGUiLCJjb25maWciLCIkc3RhdGVQcm92aWRlciIsIiR1cmxSb3V0ZXJQcm92aWRlciIsIiRhdXRoUHJvdmlkZXIiLCJmYWNlYm9vayIsImNsaWVudElkIiwic3RhdGUiLCJob21lIiwiYXV0aEVudHJhbmNlIiwiZGFzaGJvYXJkIiwib3RoZXJ3aXNlIiwidmlld3MiLCJtYWluIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwiZG9jdW1lbnQiLCJyZWFkeSIsIiRpbmplY3QiLCJzZXJ2aWNlIiwiZmFjdG9yeSIsImRpcmVjdGl2ZSJdLCJtYXBwaW5ncyI6IkFBQUEsWUNJQSxTQUFTQSxRQUNMQyxRQUFRQyxJQUFJLGlCQUNaQyxTQUNBQyxtQkFHSixRQUFTRCxVQUNMRSxFQUFFLFdBQVdGLFFBQ1RHLFdBQVksS0FJcEIsUUFBU0Ysb0JBQ0wsR0FDSUcsR0FEQUMsRUFBZ0IsQ0FFcEJILEdBQUVJLFFBQVFDLE9BQU8sV0FFYkgsRUFBS0YsRUFBRU0sTUFBTUMsWUFDSkosRUFBTEQsR0FDQUYsRUFBRSxrQkFBa0JRLFlBQVksVUFDaENSLEVBQUUsa0JBQWtCUyxJQUFJLGdCQUFpQixjQUV6Q1QsRUFBRSxrQkFBa0JVLFNBQVMsVUFFakNQLEVBQWdCRCxFQUVaRixFQUFFSSxRQUFRRyxZQUFjLEdBQ3hCUCxFQUFFLGtCQUFrQlUsU0FBUyxPQUU3QlYsRUFBRUksUUFBUUcsWUFBYyxHQUN4QlAsRUFBRSxrQkFBa0JRLFlBQVksT0FFaENSLEVBQUVJLFFBQVFHLFlBQWMsR0FHeEJQLEVBQUVJLFFBQVFHLFlBQWMsS0FDeEJQLEVBQUUsa0JBQWtCUyxJQUFJLGFBQWMsc0NBRXRDVCxFQUFFSSxRQUFRRyxZQUFjLEtBQ3hCUCxFQUFFLGtCQUFrQlMsSUFBSSxhQUFjLDBDQ25DbEQsUUFBU0UsU0FBUUMsR0FDYk4sS0FBS08sZUFBaUIsV0FJbEIsTUFBT0QsSUFDSEUsT0FBUSxNQUNSQyxJQUFBLDJCQUFSVCxLQUFLVSxZQUFjLFNBQUFDLEdBSWYsTUFBT0wsSUFD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TUFBTThELFFBQVEsUUxoQnBCSixRQUNLSyxPQUFPLFlBQ0osWUFDQSxhQUVBLGVBQ0EsY0FFSEMsUUFBQSxpQkFBQSxxQkFBQSxnQkFBTyxTQUFTQyxFQUFnQkMsRUFBb0JDLEdBRXJEQSxFQUNLQyxVQUNHQyxTQUFVLG9CQUdsQkosRUFDS0ssTUFBTUMsTUFDTkQsTUFBTUUsY0FDTkYsTUFBTUcsV0FrQlhQLEVBQW1CUSxVQUFVLE9BSWpDLElBQUlILE9BQ0ExQyxLQUFNLE9BQ05wQixJQUFLLElBQ0xrRSxPQUNJQyxNQUNJQyxZQUFhLGtCQUNiQyxXQUFZLGNBSXBCTixjQUNBM0MsS0FBTSxlQUNOcEIsSUFBSyxZQUNMa0UsT0FDSUMsTUFDSUMsWUFBYSxzQkFDYkMsV0FBWSxjQUlwQkwsV0FDQTVDLEtBQU0sWUFDTnBCLElBQUssYUFDTGtFLE9BQ0lDLE1BQ0lDLFlBQWEsdUJBQ2JDLFdBQVksa0JDbEV4QnBGLEdBQUVxRixVQUFVQyxNQUFNM0YsTUNBbEJnQixRQUFRNEUsU0FBVyxTQUNuQmhFLFFBQVFnRSxTQUFXLFNBQ25CdkQsTUFBTXVELFNBQVcsYUFBYyxZQUYvQnZCLFFBQ0tLLE9BQU8sWUFDUG1CLFFBQVEsVUFBVzdFLFNBQ25CNkUsUUFBUSxVQUFXakUsU0FDbkJrRSxRQUFRLFFBQVN6RCxPQ0p0Qk0sU0FBU2lELFNBQVcsU0FBVSxRQUFTLFNBQVUsV0FDakRqQyxjQUFjaUMsU0FBVyxTQUFVLFFBQVMsU0FBVSxVQUFXLGNBRGpFdkIsUUFDS0ssT0FBTyxZQUNQZSxXQUFXLFdBQVkvQyxVQUN2QitDLFdBQVcsV0FBWTlDLFVBQ3ZCOEMsV0FBVyxnQkFBaUI5QixlQ0pqQ1UsUUFDS0ssT0FBTyxZQUNQcUIsVUFBVSxVQUFXbkMsU0NGMUJTLFFBQ0tLLE9BQU8sWUFDUHFCLFVBQVUsVUFBVzdCIiwiZmlsZSI6ImJ1bmRsZS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdwaW5jaEFwcCcsIFtcbiAgICAgICAgJ3VpLnJvdXRlcicsXG4gICAgICAgICdzYXRlbGxpemVyJyxcbiAgICAgICAgLy8gJ3VpLmJvb3RzdHJhcCcsXG4gICAgICAgICduZ0ZpbGVVcGxvYWQnLFxuICAgICAgICAnbmdJbWdDcm9wJ1xuICAgIF0pXG4gICAgLmNvbmZpZyhmdW5jdGlvbigkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyLCAkYXV0aFByb3ZpZGVyKSB7XG5cbiAgICAkYXV0aFByb3ZpZGVyXG4gICAgICAgIC5mYWNlYm9vayh7XG4gICAgICAgICAgICBjbGllbnRJZDogJzI5ODE2NTExMzg0OTM2NidcbiAgICAgICAgfSk7XG5cbiAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAuc3RhdGUoaG9tZSlcbiAgICAgICAgLnN0YXRlKGF1dGhFbnRyYW5jZSlcbiAgICAgICAgLnN0YXRlKGRhc2hib2FyZClcbiAgICAgICAgLy8gLnN0YXRlKHBwYWdlKVxuICAgICAgICAvLyAuc3RhdGUocHBhZ2VfcHJvamVjdHMpXG4gICAgICAgIC8vIC5zdGF0ZShwcGFnZV9saWtlZClcbiAgICAgICAgLy8gLnN0YXRlKHBwYWdlX2ZvbGxvd2VycylcbiAgICAgICAgLy8gLnN0YXRlKHByb2plY3RwYWdlKVxuICAgICAgICAvLyAuc3RhdGUocHJvamVjdFNldHRpbmcpXG4gICAgICAgIC8vIC5zdGF0ZShwcm9qZWN0U2V0dGluZ19nZW5lcmFsKVxuICAgICAgICAvLyAuc3RhdGUocHJvamVjdFNldHRpbmdfcmVxdWVzdClcbiAgICAgICAgLy8gLnN0YXRlKHByb2plY3RTZXR0aW5nX3ByaXZhY3kpXG4gICAgICAgIC8vIC5zdGF0ZShwcm9qZWN0U2V0dGluZ19kYW5nZXIpXG4gICAgICAgIC8vIC5zdGF0ZShwcm9maWxlU2V0dGluZylcbiAgICAgICAgLy8gLnN0YXRlKHByb2ZpbGVTZXR0aW5nX2dlbmVyYWwpXG4gICAgICAgIC8vIC5zdGF0ZShwcm9maWxlU2V0dGluZ19yZXF1ZXN0KVxuICAgICAgICAvLyAuc3RhdGUocHJvZmlsZVNldHRpbmdfcHJpdmFjeSlcbiAgICAgICAgLy8gLnN0YXRlKHByb2ZpbGVTZXR0aW5nX2RhbmdlcilcblxuXG4gICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnLycpO1xufSk7XG5cblxubGV0IGhvbWUgPSB7XG4gICAgbmFtZTogJ2hvbWUnLFxuICAgIHVybDogJy8nLFxuICAgIHZpZXdzOiB7XG4gICAgICAgIG1haW46IHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2h0bWwvaG9tZS5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdob21lQ3RybCdcbiAgICAgICAgfVxuICAgIH1cbn1cbmxldCBhdXRoRW50cmFuY2UgPSB7XG4gICAgbmFtZTogJ2F1dGhFbnRyYW5jZScsXG4gICAgdXJsOiAnL2VudHJhbmNlJyxcbiAgICB2aWV3czoge1xuICAgICAgICBtYWluOiB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9odG1sL2VudHJhbmNlLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ2F1dGhDdHJsJ1xuICAgICAgICB9XG4gICAgfVxufVxubGV0IGRhc2hib2FyZCA9IHtcbiAgICBuYW1lOiAnZGFzaGJvYXJkJyxcbiAgICB1cmw6ICcvZGFzaGJvYXJkJyxcbiAgICB2aWV3czoge1xuICAgICAgICBtYWluOiB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9odG1sL2Rhc2hib2FyZC5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdkYXNoYm9hcmRDdHJsJ1xuICAgICAgICB9XG4gICAgfVxufVxuLy8gbGV0IHBwYWdlID0ge1xuLy8gICAgIG5hbWU6ICdwcGFnZScsXG4vLyAgICAgdXJsOiAnL20vOnVzZXJJZCcsXG4vLyAgICAgdmlld3M6IHtcbi8vICAgICAgICAgJ21haW4nOiB7XG4vLyAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9odG1sL3BwYWdlLmh0bWwnLFxuLy8gICAgICAgICAgICAgY29udHJvbGxlcjogJ3BwYWdlQ3RybCdcbi8vICAgICAgICAgfSxcbi8vICAgICAgICAgJ3JpZ2h0X3NlY3Rpb24nOiB7XG4vLyAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9odG1sL3BwYWdlX3Byb2plY3RzLmh0bWwnLFxuLy8gICAgICAgICAgICAgY29udHJvbGxlcjogJ3BwYWdlQ3RybCdcbi8vICAgICAgICAgfVxuLy8gICAgIH1cbi8vIH1cbi8vXG4vLyBsZXQgcHBhZ2VfcHJvamVjdHMgPSB7XG4vLyAgICAgbmFtZTogJ3BwYWdlX3Byb2plY3RzJyxcbi8vICAgICB1cmw6ICcvcHJvamVjdHMnLFxuLy8gICAgIHBhcmVudDogJ3BwYWdlJyxcbi8vICAgICB2aWV3czoge1xuLy8gICAgICAgICByaWdodF9zZWN0aW9uOiB7XG4vLyAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9odG1sL3BwYWdlX3Byb2plY3RzLmh0bWwnLFxuLy8gICAgICAgICAgICAgY29udHJvbGxlcjogJ3BwYWdlQ3RybCdcbi8vICAgICAgICAgfVxuLy8gICAgIH1cbi8vIH1cbi8vIGxldCBwcGFnZV9saWtlZCA9IHtcbi8vICAgICBuYW1lOiAncHBhZ2VfbGlrZWQnLFxuLy8gICAgIHVybDogJy9saWtlZCcsXG4vLyAgICAgcGFyZW50OiAncHBhZ2UnLFxuLy8gICAgIHZpZXdzOiB7XG4vLyAgICAgICAgIHJpZ2h0X3NlY3Rpb246IHtcbi8vICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2h0bWwvcHBhZ2VfbGlrZWQuaHRtbCcsXG4vLyAgICAgICAgICAgICBjb250cm9sbGVyOiAncHBhZ2VDdHJsJ1xuLy8gICAgICAgICB9XG4vLyAgICAgfVxuLy8gfVxuLy8gbGV0IHBwYWdlX2ZvbGxvd2VycyA9IHtcbi8vICAgICBuYW1lOiAncHBhZ2VfZm9sbG93ZXJzJyxcbi8vICAgICB1cmw6ICcvZm9sbG93ZXJzJyxcbi8vICAgICBwYXJlbnQ6ICdwcGFnZScsXG4vLyAgICAgdmlld3M6IHtcbi8vICAgICAgICAgcmlnaHRfc2VjdGlvbjoge1xuLy8gICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvaHRtbC9wcGFnZV9mb2xsb3dlcnMuaHRtbCcsXG4vLyAgICAgICAgICAgICBjb250cm9sbGVyOiAncHBhZ2VDdHJsJ1xuLy8gICAgICAgICB9XG4vLyAgICAgfVxuLy8gfVxuLy8gbGV0IHByb2plY3RwYWdlID0ge1xuLy8gICAgIG5hbWU6ICdwcm9qZWN0cGFnZScsXG4vLyAgICAgdXJsOiAnLzpwcm9qZWN0SWQnLFxuLy8gICAgIHZpZXdzOiB7XG4vLyAgICAgICAgIG1haW46IHtcbi8vICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2h0bWwvcHJvamVjdHBhZ2UuaHRtbCcsXG4vLyAgICAgICAgICAgICBjb250cm9sbGVyOiAncHJvamVjdHBhZ2VDdHJsJ1xuLy8gICAgICAgICB9XG4vLyAgICAgfVxuLy8gfVxuLy8gbGV0IHByb2plY3RTZXR0aW5nID0ge1xuLy8gICAgIG5hbWU6ICdwcm9qZWN0U2V0dGluZycsXG4vLyAgICAgdXJsOiAnL3Byb2plY3QvOnByb2plY3RJZC9zZXR0aW5nJyxcbi8vICAgICB2aWV3czoge1xuLy8gICAgICAgICBtYWluOiB7XG4vLyAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9odG1sL3Byb2plY3RTZXR0aW5nLmh0bWwnLFxuLy8gICAgICAgICAgICAgY29udHJvbGxlcjogJ3Byb2plY3RTZXR0aW5nQ3RybCdcbi8vICAgICAgICAgfVxuLy8gICAgIH1cbi8vIH1cbi8vIGxldCBwcm9qZWN0U2V0dGluZ19nZW5lcmFsID0ge1xuLy8gICAgIG5hbWU6ICdwcm9qZWN0U2V0dGluZ19nZW5lcmFsJyxcbi8vICAgICB1cmw6ICcvZ2VuZXJhbCcsXG4vLyAgICAgcGFyZW50OiAncHJvamVjdFNldHRpbmcnLFxuLy8gICAgIHZpZXdzOiB7XG4vLyAgICAgICAgIHJpZ2h0X3NlY3Rpb246IHtcbi8vICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2h0bWwvcHJvamVjdFNldHRpbmdfZ2VuZXJhbC5odG1sJyxcbi8vICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdwcm9qZWN0U2V0dGluZ0N0cmwnXG4vLyAgICAgICAgIH1cbi8vICAgICB9XG4vLyB9XG4vLyBsZXQgcHJvamVjdFNldHRpbmdfcmVxdWVzdCA9IHtcbi8vICAgICBuYW1lOiAncHJvamVjdFNldHRpbmdfcmVxdWVzdCcsXG4vLyAgICAgdXJsOiAnL3JlcXVlc3QnLFxuLy8gICAgIHBhcmVudDogJ3Byb2plY3RTZXR0aW5nJyxcbi8vICAgICB2aWV3czoge1xuLy8gICAgICAgICByaWdodF9zZWN0aW9uOiB7XG4vLyAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9odG1sL3Byb2plY3RTZXR0aW5nX3JlcXVlc3QuaHRtbCcsXG4vLyAgICAgICAgICAgICBjb250cm9sbGVyOiAncHJvamVjdFNldHRpbmdDdHJsJ1xuLy8gICAgICAgICB9XG4vLyAgICAgfVxuLy8gfVxuLy8gbGV0IHByb2plY3RTZXR0aW5nX3ByaXZhY3kgPSB7XG4vLyAgICAgbmFtZTogJ3Byb2plY3RTZXR0aW5nX3ByaXZhY3knLFxuLy8gICAgIHVybDogJy9wcml2YWN5Jyxcbi8vICAgICBwYXJlbnQ6ICdwcm9qZWN0U2V0dGluZycsXG4vLyAgICAgdmlld3M6IHtcbi8vICAgICAgICAgcmlnaHRfc2VjdGlvbjoge1xuLy8gICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvaHRtbC9wcm9qZWN0U2V0dGluZ19wcml2YWN5Lmh0bWwnLFxuLy8gICAgICAgICAgICAgY29udHJvbGxlcjogJ3Byb2plY3RTZXR0aW5nQ3RybCdcbi8vICAgICAgICAgfVxuLy8gICAgIH1cbi8vIH1cbi8vIGxldCBwcm9qZWN0U2V0dGluZ19kYW5nZXIgPSB7XG4vLyAgICAgbmFtZTogJ3Byb2plY3RTZXR0aW5nX2RhbmdlcicsXG4vLyAgICAgdXJsOiAnL2RhbmdlcicsXG4vLyAgICAgcGFyZW50OiAncHJvamVjdFNldHRpbmcnLFxuLy8gICAgIHZpZXdzOiB7XG4vLyAgICAgICAgIHJpZ2h0X3NlY3Rpb246IHtcbi8vICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2h0bWwvcHJvamVjdFNldHRpbmdfZGFuZ2VyLmh0bWwnLFxuLy8gICAgICAgICAgICAgY29udHJvbGxlcjogJ3Byb2plY3RTZXR0aW5nQ3RybCdcbi8vICAgICAgICAgfVxuLy8gICAgIH1cbi8vIH1cbi8vIGxldCBwcm9maWxlU2V0dGluZyA9IHtcbi8vICAgICBuYW1lOiAncHJvZmlsZVNldHRpbmcnLFxuLy8gICAgIHVybDogJy91c2VyLzp1c2VySWQvc2V0dGluZycsXG4vLyAgICAgdmlld3M6IHtcbi8vICAgICAgICAgbWFpbjoge1xuLy8gICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvaHRtbC9wcm9maWxlU2V0dGluZy5odG1sJyxcbi8vICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdwcm9maWxlU2V0dGluZ0N0cmwnXG4vLyAgICAgICAgIH1cbi8vICAgICB9XG4vLyB9XG4vLyBsZXQgcHJvZmlsZVNldHRpbmdfZ2VuZXJhbCA9IHtcbi8vICAgICBuYW1lOiAncHJvZmlsZVNldHRpbmdfZ2VuZXJhbCcsXG4vLyAgICAgdXJsOiAnL2dlbmVyYWwnLFxuLy8gICAgIHBhcmVudDogJ3Byb2ZpbGVTZXR0aW5nJyxcbi8vICAgICB2aWV3czoge1xuLy8gICAgICAgICByaWdodF9zZWN0aW9uOiB7XG4vLyAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9odG1sL3Byb2ZpbGVTZXR0aW5nX2dlbmVyYWwuaHRtbCcsXG4vLyAgICAgICAgICAgICBjb250cm9sbGVyOiAncHJvZmlsZVNldHRpbmdDdHJsJ1xuLy8gICAgICAgICB9XG4vLyAgICAgfVxuLy8gfVxuLy8gbGV0IHByb2ZpbGVTZXR0aW5nX3JlcXVlc3QgPSB7XG4vLyAgICAgbmFtZTogJ3Byb2ZpbGVTZXR0aW5nX3JlcXVlc3QnLFxuLy8gICAgIHVybDogJy9yZXF1ZXN0Jyxcbi8vICAgICBwYXJlbnQ6ICdwcm9maWxlU2V0dGluZycsXG4vLyAgICAgdmlld3M6IHtcbi8vICAgICAgICAgcmlnaHRfc2VjdGlvbjoge1xuLy8gICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvaHRtbC9wcm9maWxlU2V0dGluZ19yZXF1ZXN0Lmh0bWwnLFxuLy8gICAgICAgICAgICAgY29udHJvbGxlcjogJ3Byb2ZpbGVTZXR0aW5nQ3RybCdcbi8vICAgICAgICAgfVxuLy8gICAgIH1cbi8vIH1cbi8vIGxldCBwcm9maWxlU2V0dGluZ19wcml2YWN5ID0ge1xuLy8gICAgIG5hbWU6ICdwcm9maWxlU2V0dGluZ19wcml2YWN5Jyxcbi8vICAgICB1cmw6ICcvcHJpdmFjeScsXG4vLyAgICAgcGFyZW50OiAncHJvZmlsZVNldHRpbmcnLFxuLy8gICAgIHZpZXdzOiB7XG4vLyAgICAgICAgIHJpZ2h0X3NlY3Rpb246IHtcbi8vICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2h0bWwvcHJvZmlsZVNldHRpbmdfcHJpdmFjeS5odG1sJyxcbi8vICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdwcm9maWxlU2V0dGluZ0N0cmwnXG4vLyAgICAgICAgIH1cbi8vICAgICB9XG4vLyB9XG4vLyBsZXQgcHJvZmlsZVNldHRpbmdfZGFuZ2VyID0ge1xuLy8gICAgICAgICBuYW1lOiAncHJvZmlsZVNldHRpbmdfZGFuZ2VyJyxcbi8vICAgICAgICAgdXJsOiAnL2RhbmdlcicsXG4vLyAgICAgICAgIHBhcmVudDogJ3Byb2ZpbGVTZXR0aW5nJyxcbi8vICAgICAgICAgdmlld3M6IHtcbi8vICAgICAgICAgICAgIHJpZ2h0X3NlY3Rpb246IHtcbi8vICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9odG1sL3Byb2ZpbGVTZXR0aW5nX2Rhbmdlci5odG1sJyxcbi8vICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAncHJvZmlsZVNldHRpbmdDdHJsJ1xuLy8gICAgICAgICAgICAgfVxuLy8gICAgICAgICB9XG4vLyAgICAgfVxuIiwiJ3VzZSBzdHJpY3QnXG5cbiQoZG9jdW1lbnQpLnJlYWR5KGluaXQpO1xuXG5mdW5jdGlvbiBpbml0KCkge1xuICAgIGNvbnNvbGUubG9nKCdqcXVlcnkgbG9hZGVkJyk7XG4gICAgc3RpY2t5KClcbiAgICB3aW5kb3dTY3JvbGxEb3duKClcbn1cblxuZnVuY3Rpb24gc3RpY2t5KCkge1xuICAgICQoXCIuc3RpY2t5XCIpLnN0aWNreSh7XG4gICAgICAgIHRvcFNwYWNpbmc6IDYwXG4gICAgfSlcbn1cblxuZnVuY3Rpb24gd2luZG93U2Nyb2xsRG93bigpIHtcbiAgICB2YXIgbGFzdFNjcm9sbFRvcCA9IDBcbiAgICB2YXIgc3RcbiAgICAkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygkKHdpbmRvdykuc2Nyb2xsVG9wKCkpO1xuICAgICAgICBzdCA9ICQodGhpcykuc2Nyb2xsVG9wKCk7XG4gICAgICAgIGlmIChzdCA8IGxhc3RTY3JvbGxUb3ApIHtcbiAgICAgICAgICAgICQoJy5ob21lLXBhZ2UgbmF2JykucmVtb3ZlQ2xhc3MoJ2ZvbGRlZCcpXG4gICAgICAgICAgICAkKCcuaG9tZS1wYWdlIG5hdicpLmNzcygnYm9yZGVyLWJvdHRvbScsICcwcHggc29saWQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICQoJy5ob21lLXBhZ2UgbmF2JykuYWRkQ2xhc3MoJ2ZvbGRlZCcpXG4gICAgICAgIH1cbiAgICAgICAgbGFzdFNjcm9sbFRvcCA9IHN0XG5cbiAgICAgICAgaWYgKCQod2luZG93KS5zY3JvbGxUb3AoKSA8IDEpIHtcbiAgICAgICAgICAgICQoJy5ob21lLXBhZ2UgbmF2JykuYWRkQ2xhc3MoJ3RvcCcpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCQod2luZG93KS5zY3JvbGxUb3AoKSA+IDEpIHtcbiAgICAgICAgICAgICQoJy5ob21lLXBhZ2UgbmF2JykucmVtb3ZlQ2xhc3MoJ3RvcCcpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCQod2luZG93KS5zY3JvbGxUb3AoKSA+IDMwKSB7XG5cbiAgICAgICAgfVxuICAgICAgICBpZiAoJCh3aW5kb3cpLnNjcm9sbFRvcCgpIDwgNTQwKSB7XG4gICAgICAgICAgICAkKCcuaG9tZS1wYWdlIG5hdicpLmNzcygnYm94LXNoYWRvdycsICdpbnNldCAwIC0xcHggMHB4IDBweCByZ2JhKDAsMCwwLDApJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCQod2luZG93KS5zY3JvbGxUb3AoKSA+IDU0MCkge1xuICAgICAgICAgICAgJCgnLmhvbWUtcGFnZSBuYXYnKS5jc3MoJ2JveC1zaGFkb3cnLCAnaW5zZXQgMCAtMXB4IDBweCAwcHggcmdiYSgwLDAsMCwwLjEpJyk7XG4gICAgICAgIH1cblxuICAgIH0pXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdwaW5jaEFwcCcpXG4gICAgLnNlcnZpY2UoJ0FjY291bnQnLCBBY2NvdW50KVxuICAgIC5zZXJ2aWNlKCdQcm9qZWN0JywgUHJvamVjdClcbiAgICAuZmFjdG9yeSgnZm9jdXMnLCBmb2N1cylcblxuZnVuY3Rpb24gQWNjb3VudCgkaHR0cCkge1xuICAgIHRoaXMuZ2V0Q3VycmVudFVzZXIgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiAkaHR0cCh7XG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgdXJsOiBgL2FwaS9hdXRoL2N1cnJlbnRVc2VyYFxuICAgICAgICB9KVxuICAgIH1cbiAgICB0aGlzLmdldFVzZXJEYXRhID0gKHVyaVVzZXJJZCkgPT4ge1xuICAgICAgICByZXR1cm4gJGh0dHAoe1xuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIHVybDogYC9hcGkvdXNlcnMvJHt1cmlVc2VySWR9YFxuICAgICAgICB9KVxuICAgIH1cbiAgICB0aGlzLnVwZGF0ZVVzZXJEYXRhID0gKHVyaVVzZXJJZCwgdXBkYXRlVXNlckRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuICRodHRwKHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BVVCcsXG4gICAgICAgICAgICB1cmw6IGAvYXBpL3VzZXJzLyR7dXJpVXNlcklkfWAsXG4gICAgICAgICAgICBkYXRhOiB1cGRhdGVVc2VyRGF0YVxuICAgICAgICB9KVxuICAgIH1cbiAgICB0aGlzLmZvbGxvdyA9IChjdXJyZW50VXNlciwgZm9sbG93VGFyZ2V0KSA9PiB7XG4gICAgICAgIHJldHVybiAkaHR0cCh7XG4gICAgICAgICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgICAgICAgdXJsOiBgL2FwaS91c2Vycy9ldmVudC9mb2xsb3dgLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRVc2VyOiBjdXJyZW50VXNlcixcbiAgICAgICAgICAgICAgICBmb2xsb3dUYXJnZXQ6IGZvbGxvd1RhcmdldFxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cbn1cblxuZnVuY3Rpb24gUHJvamVjdCgkaHR0cCkge1xuICAgIHRoaXMuY3JlYXRlT25lID0gKG5ld1BvamVjdE9iaikgPT4ge1xuICAgICAgICByZXR1cm4gJGh0dHAoe1xuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICB1cmw6ICcvYXBpL3Byb2plY3RzLycsXG4gICAgICAgICAgICBkYXRhOiBuZXdQb2plY3RPYmpcbiAgICAgICAgfSlcbiAgICB9XG4gICAgdGhpcy5nZXRBbGwgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiAkaHR0cCh7XG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgdXJsOiAnL2FwaS9wcm9qZWN0cy9hbGwnXG4gICAgICAgIH0pXG4gICAgfVxuICAgIHRoaXMuZ2V0T25lUG9yamVjdCA9IChwcm9qZWN0SWQpID0+IHtcbiAgICAgICAgcmV0dXJuICRodHRwKHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICB1cmw6IGAvYXBpL3Byb2plY3RzLyR7cHJvamVjdElkfWBcbiAgICAgICAgfSlcbiAgICB9XG4gICAgdGhpcy5kZWxldGVPbmUgPSAocHJvamVjdElkKSA9PiB7XG4gICAgICAgIHJldHVybiAkaHR0cCh7XG4gICAgICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgICAgICAgdXJsOiBgL2FwaS9wcm9qZWN0cy8ke3Byb2plY3RJZH1gXG4gICAgICAgIH0pXG4gICAgfVxuICAgIHRoaXMuZGVsZXRlT25lID0gKHByb2plY3RJZCkgPT4ge1xuICAgICAgICByZXR1cm4gJGh0dHAoe1xuICAgICAgICAgICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICAgICAgICAgIHVybDogYC9hcGkvcHJvamVjdHMvJHtwcm9qZWN0SWR9YFxuICAgICAgICB9KVxuICAgIH1cbiAgICB0aGlzLmxpa2UgPSAocHJvamVjdElkLCBsaWtlcklkKSA9PiB7XG4gICAgICAgIHJldHVybiAkaHR0cCh7XG4gICAgICAgICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgICAgICAgdXJsOiBgL2FwaS9wcm9qZWN0cy9ldmVudC9saWtlYCxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBwcm9qZWN0SWQ6IHByb2plY3RJZCxcbiAgICAgICAgICAgICAgICBsaWtlcklkOiBsaWtlcklkXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxufVxuXG5mdW5jdGlvbiBmb2N1cygkcm9vdFNjb3BlLCAkdGltZW91dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdmb2N1c09uJywgbmFtZSk7XG4gICAgICAgIH0sIDApO1xuICAgIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ3BpbmNoQXBwJylcbiAgICAuY29udHJvbGxlcignaG9tZUN0cmwnLCBob21lQ3RybClcbiAgICAuY29udHJvbGxlcignYXV0aEN0cmwnLCBhdXRoQ3RybClcbiAgICAuY29udHJvbGxlcignZGFzaGJvYXJkQ3RybCcsIGRhc2hib2FyZEN0cmwpXG4gICAgLy8gLmNvbnRyb2xsZXIoJ25hdkN0cmwnLCBuYXZDdHJsKVxuICAgIC8vIC5jb250cm9sbGVyKCdwcGFnZUN0cmwnLCBwcGFnZUN0cmwpXG4gICAgLy8gLmNvbnRyb2xsZXIoJ3Byb2ZpbGVTZXR0aW5nQ3RybCcsIHByb2ZpbGVTZXR0aW5nQ3RybClcbiAgICAvLyAuY29udHJvbGxlcigncHJvamVjdHBhZ2VDdHJsJywgcHJvamVjdHBhZ2VDdHJsKVxuICAgIC8vIC5jb250cm9sbGVyKCdwcm9qZWN0U2V0dGluZ0N0cmwnLCBwcm9qZWN0U2V0dGluZ0N0cmwpXG5cblxuZnVuY3Rpb24gaG9tZUN0cmwoKSB7XG4gICAgY29uc29sZS5sb2coJ2hvbWVDdHJsIGxvYWRlZCcpO1xufVxuXG5mdW5jdGlvbiBhdXRoQ3RybCgkc2NvcGUsICRhdXRoLCAkc3RhdGUsIEFjY291bnQpIHtcbiAgICBjb25zb2xlLmxvZygnYXV0aEN0cmwgbG9hZGVkJylcblxuICAgICRzY29wZS5nZXRDdXJyZW50VXNlciA9ICgpID0+IHtcbiAgICAgICAgZ2V0Q3VycmVudFVzZXIoKVxuICAgIH1cblxuICAgICRzY29wZS5hdXRoX2VudGVyID0gKGF1dGhEYXRhKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdhdXRoRGF0YTogJywgYXV0aERhdGEpO1xuICAgICAgICAkYXV0aC5zaWdudXAoYXV0aERhdGEpXG4gICAgICAgICAgICAudGhlbihyZXMgPT4ge1xuICAgICAgICAgICAgICAgICRhdXRoLnNldFRva2VuKHJlcylcbiAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2Rhc2hib2FyZCcpXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JlcyBAYXV0aF9lbnRlcjogJywgcmVzLmRhdGEpXG4gICAgICAgICAgICAgICAgZ2V0Q3VycmVudFVzZXIoKVxuICAgICAgICAgICAgICAgICAgICAvLyB0b2FzdHIuaW5mbygnWW91IGhhdmUgc3VjY2Vzc2Z1bGx5IGNyZWF0ZWQgYSBuZXcgYWNjb3VudCBhbmQgaGF2ZSBiZWVuIHNpZ25lZC1pbicpO1xuICAgICAgICAgICAgfSwgZXJyID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZXJyIEBhdXRoX2VudGVyOiAnLCBlcnIpXG4gICAgICAgICAgICAgICAgICAgIC8vIHRvYXN0ci5lcnJvcihyZXNwb25zZS5kYXRhLm1lc3NhZ2UpO1xuICAgICAgICAgICAgfSlcbiAgICB9XG5cbiAgICAkc2NvcGUuYXV0aGVudGljYXRlID0gKHByb3ZpZGVyKSA9PiB7XG4gICAgICAgICRhdXRoLmF1dGhlbnRpY2F0ZShwcm92aWRlcik7XG4gICAgfVxuICAgICRzY29wZS5sb2dvdXQgPSAoKSA9PiB7XG4gICAgICAgICRhdXRoLmxvZ291dCgpXG4gICAgICAgICRzdGF0ZS5nbygnYXV0aEVudHJhbmNlJylcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRDdXJyZW50VXNlcigpIHtcbiAgICAgICAgaWYgKCRhdXRoLmdldFRva2VuKCkpIHtcbiAgICAgICAgICAgIEFjY291bnQuZ2V0Q3VycmVudFVzZXIoJGF1dGguZ2V0VG9rZW4oKSlcbiAgICAgICAgICAgICAgICAudGhlbihyZXMgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncmVzIEBnZXRDdXJyZW50VXNlcjogJywgcmVzLmRhdGEpXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jdXJyZW50VXNlciA9IHJlcy5kYXRhXG4gICAgICAgICAgICAgICAgfSwgZXJyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdhdXRoRW50cmFuY2UnKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbn1cblxuZnVuY3Rpb24gZGFzaGJvYXJkQ3RybCgkc2NvcGUsICRhdXRoLCAkc3RhdGUsIEFjY291bnQsICRyb290U2NvcGUpIHtcbiAgICBjb25zb2xlLmxvZygnZGFzaGJvYXJkQ3RybCBsb2FkZWQnKVxuICAgIEFjY291bnQuZ2V0Q3VycmVudFVzZXIoJGF1dGguZ2V0VG9rZW4oKSlcbiAgICAgICAgLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICAgIGlmKCEkcm9vdFNjb3BlLmN1cnJlbnRVc2VyKXtcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLmN1cnJlbnRVc2VyID0gcmVzLmRhdGFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZXMgQGdldEN1cnJlbnRVc2VyOiAnLCByZXMuZGF0YSlcbiAgICAgICAgfSwgZXJyID0+IHtcbiAgICAgICAgICAgICRzdGF0ZS5nbygnaG9tZScpXG4gICAgICAgIH0pXG59XG5cblxuLy8gZnVuY3Rpb24gcHJvamVjdFNldHRpbmdDdHJsKCRzY29wZSwgJGh0dHAsICRzdGF0ZVBhcmFtcywgUHJvamVjdCwgJHN0YXRlLCAkbG9jYXRpb24pIHtcbi8vICAgICBjb25zb2xlLmxvZygncHJvamVjdFNldHRpbmdDdHJsIGxvYWRlZCcpO1xuLy8gICAgIHZhciBpc0F1dGhvciA9IGZhbHNlO1xuLy8gICAgIHZhciBwcm9qZWN0SWQgPSAkc3RhdGVQYXJhbXMucHJvamVjdElkO1xuLy9cbi8vICAgICBQcm9qZWN0LmdldE9uZVBvcmplY3QocHJvamVjdElkKS50aGVuKHJlcyA9PiB7XG4vLyAgICAgICAgIGNvbnNvbGUubG9nKCdwcm9qZWN0czogJywgcmVzLmRhdGEpO1xuLy8gICAgICAgICAkc2NvcGUucHJvamVjdCA9IHJlcy5kYXRhO1xuLy8gICAgICAgICAkc2NvcGUudXBkYXRlUHJvamVjdERhdGEgPSAkc2NvcGUucHJvamVjdDtcbi8vICAgICAgICAgJHNjb3BlLnByb2plY3QuYXV0aG9yLmZvckVhY2goYXV0aG9yID0+IHtcbi8vICAgICAgICAgICAgIC8vIGluIGNhc2UsIHByb2plY3QgaGFzIG11dGlwbGUgYXV0aG9yc1xuLy8gICAgICAgICAgICAgaWYgKGF1dGhvci5faWQgPT0gJHNjb3BlLmN1cnJlbnRVc2VyLl9pZCkge1xuLy8gICAgICAgICAgICAgICAgIGlzQXV0aG9yID0gdHJ1ZTtcbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgfSlcbi8vICAgICAgICAgaWYgKGlzQXV0aG9yKSB7XG4vLyAgICAgICAgICAgICBjb25zb2xlLmxvZygnaXNBdXRob3InKTtcbi8vICAgICAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdpcyBub3QgQXV0aG9yJyk7XG4vLyAgICAgICAgICAgICAkc3RhdGUuZ28oJ2hvbWUnKTtcbi8vICAgICAgICAgfVxuLy8gICAgIH0sIGVyciA9PiB7XG4vLyAgICAgICAgIGNvbnNvbGUubG9nKCdlcnIgd2hlbiBnZXQgdGhpcyBwcm9qZWN0OiAnLCBlcnIpO1xuLy8gICAgIH0pXG4vLyAgICAgJHNjb3BlLnJlcXVlc3QgPSB7XG4vLyAgICAgICAgIHBlb3BsZTogW10sXG4vLyAgICAgICAgIHN1cHBseTogW10sXG4vLyAgICAgICAgIG1vbmV5OiBbXVxuLy8gICAgIH07XG4vL1xuLy8gICAgICRzY29wZS5pbml0ID0gKCkgPT4ge1xuLy8gICAgICAgICB2YXIgY2hlY2tVcmwgPSAkbG9jYXRpb24uJCRwYXRoLmluY2x1ZGVzKCdkYW5nZXInKSB8fCAkbG9jYXRpb24uJCRwYXRoLmluY2x1ZGVzKCdyZXF1ZXN0JykgfHwgJGxvY2F0aW9uLiQkcGF0aC5pbmNsdWRlcygncHJpdmFjeScpXG4vLyAgICAgICAgIGlmICghY2hlY2tVcmwpIHtcbi8vICAgICAgICAgICAgICRzdGF0ZS5nbygncHJvamVjdFNldHRpbmdfZ2VuZXJhbCcpO1xuLy8gICAgICAgICB9XG4vLyAgICAgfTtcbi8vXG4vLyAgICAgJHNjb3BlLmFkZENob2ljZVRvUGVvcGxlID0gKHBlb3BsZSkgPT4ge1xuLy8gICAgICAgICBpZiAoJHNjb3BlLnJlcXVlc3QucGVvcGxlLmluZGV4T2YocGVvcGxlKSAhPT0gLTEpIHtcbi8vICAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0LnBlb3BsZS5zcGxpY2UoJHNjb3BlLnJlcXVlc3QucGVvcGxlLmluZGV4T2YocGVvcGxlKSwgMSk7XG4vLyAgICAgICAgIH0gZWxzZSB7XG4vLyAgICAgICAgICAgICAkc2NvcGUucmVxdWVzdC5wZW9wbGUucHVzaChwZW9wbGUpO1xuLy8gICAgICAgICB9XG4vLyAgICAgICAgIGNvbnNvbGUubG9nKCRzY29wZS5yZXF1ZXN0LnBlb3BsZSk7XG4vLyAgICAgfTtcbi8vXG4vLyAgICAgJHNjb3BlLmFkZENob2ljZVRvU3VwcGx5ID0gKHN1cHBseSkgPT4ge1xuLy8gICAgICAgICBpZiAoJHNjb3BlLnJlcXVlc3Quc3VwcGx5LmluZGV4T2Yoc3VwcGx5KSAhPT0gLTEpIHtcbi8vICAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0LnN1cHBseS5zcGxpY2UoJHNjb3BlLnJlcXVlc3Quc3VwcGx5LmluZGV4T2Yoc3VwcGx5KSwgMSk7XG4vLyAgICAgICAgIH0gZWxzZSB7XG4vLyAgICAgICAgICAgICAkc2NvcGUucmVxdWVzdC5zdXBwbHkucHVzaChzdXBwbHkpO1xuLy8gICAgICAgICB9XG4vLyAgICAgICAgIGNvbnNvbGUubG9nKCRzY29wZS5yZXF1ZXN0LnN1cHBseSk7XG4vLyAgICAgfVxuLy8gICAgICRzY29wZS5hZGRDaG9pY2VUb01vbmV5ID0gKG1vbmV5KSA9PiB7XG4vLyAgICAgICAgIGlmICgkc2NvcGUucmVxdWVzdC5tb25leS5pbmRleE9mKG1vbmV5KSAhPT0gLTEpIHtcbi8vICAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0Lm1vbmV5LnNwbGljZSgkc2NvcGUucmVxdWVzdC5tb25leS5pbmRleE9mKG1vbmV5KSwgMSk7XG4vLyAgICAgICAgICAgICAkc2NvcGUucmVxdWVzdC5tb25leSA9IFtdO1xuLy8gICAgICAgICB9IGVsc2Uge1xuLy8gICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3QubW9uZXkgPSBbXTtcbi8vICAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0Lm1vbmV5LnB1c2gobW9uZXkpO1xuLy8gICAgICAgICB9XG4vLyAgICAgICAgIGNvbnNvbGUubG9nKCRzY29wZS5yZXF1ZXN0Lm1vbmV5KTtcbi8vICAgICB9XG4vLyAgICAgJHNjb3BlLmRlbGV0ZVByb2plY3QgPSAocHJvamVjdEZ1bGxOYW1lKSA9PiB7XG4vLyAgICAgICAgIGlmICgkc2NvcGUuZGVsZXRlUHJvamVjdElucHV0ID09IHByb2plY3RGdWxsTmFtZSkge1xuLy8gICAgICAgICAgICAgbGV0IHByb2plY3RJZCA9ICRzdGF0ZVBhcmFtcy5wcm9qZWN0SWQ7XG4vLyAgICAgICAgICAgICBQcm9qZWN0LmRlbGV0ZU9uZShwcm9qZWN0SWQpLnRoZW4ocmVzID0+IHtcbi8vICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncHJvamVjdCBkZWxldGVkJyk7XG4vLyAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JlczogJywgcmVzLmRhdGEpO1xuLy8gICAgICAgICAgICAgICAgICRzdGF0ZS5nbygncHBhZ2UnLCB7XG4vLyAgICAgICAgICAgICAgICAgICAgIHVzZXJJZDogJHNjb3BlLmN1cnJlbnRVc2VyLl9pZFxuLy8gICAgICAgICAgICAgICAgIH0pO1xuLy8gICAgICAgICAgICAgfSwgZXJyID0+IHtcbi8vICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygndXNlciBpcyBub3QgbG9nZ2VkIGluLicpO1xuLy8gICAgICAgICAgICAgfSlcbi8vICAgICAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdubycpO1xuLy8gICAgICAgICB9XG4vLyAgICAgfVxuLy9cbi8vICAgICAkc2NvcGUuZGFuZ2VyTm90aWZpZWQgPSBmYWxzZTtcbi8vICAgICAkc2NvcGUuZGFuZ2VyTm90aWZ0eSA9ICgpID0+IHtcbi8vICAgICAgICAgJHNjb3BlLmRhbmdlck5vdGlmaWVkID0gISRzY29wZS5kYW5nZXJOb3RpZmllZDtcbi8vICAgICB9XG4vLyAgICAgJHNjb3BlLnNhbWVUb1RoZVByb2plY3ROYW1lID0gKHByb2plY3RGdWxsTmFtZSkgPT4ge1xuLy8gICAgICAgICByZXR1cm4gJHNjb3BlLmRlbGV0ZVByb2plY3RJbnB1dCA9PSBwcm9qZWN0RnVsbE5hbWU7XG4vLyAgICAgfVxuLy8gICAgICRzY29wZS5va2F5VG9EZWxldGUgPSAocHJvamVjdEZ1bGxOYW1lKSA9PiB7XG4vLyAgICAgICAgIGNvbnNvbGUubG9nKCckc2NvcGUuZGFuZ2VyTm90aWZpZWQ6ICcsICRzY29wZS5kYW5nZXJOb3RpZmllZCk7XG4vLyAgICAgICAgIHJldHVybiAkc2NvcGUuZGVsZXRlUHJvamVjdElucHV0ID09IHByb2plY3RGdWxsTmFtZSAmJiAkc2NvcGUuZGFuZ2VyTm90aWZpZWQ7XG4vLyAgICAgfVxuLy8gfVxuLy9cbi8vIGZ1bmN0aW9uIHByb2plY3RwYWdlQ3RybCgkc2NvcGUsICRodHRwLCAkc3RhdGVQYXJhbXMsIFByb2plY3QpIHtcbi8vICAgICBjb25zb2xlLmxvZygncHJvamVjdHBhZ2VDdHJsIGxvYWRlZCcpO1xuLy8gICAgICRzY29wZS5zdGF0ZSA9IHt9XG4vLyAgICAgJHNjb3BlLnN0YXRlLmlzQXV0aG9yID0gZmFsc2Vcbi8vICAgICB2YXIgcHJvamVjdElkID0gJHN0YXRlUGFyYW1zLnByb2plY3RJZDtcbi8vICAgICAvLyBjb25zb2xlLmxvZygncHJvamVjdElkOiAnLCBwcm9qZWN0SWQpO1xuLy8gICAgIFByb2plY3QuZ2V0T25lUG9yamVjdChwcm9qZWN0SWQpLnRoZW4ocmVzID0+IHtcbi8vICAgICAgICAgY29uc29sZS5sb2coJ3Byb2plY3REYXRhOiAnLCByZXMuZGF0YSk7XG4vLyAgICAgICAgICRzY29wZS5wcm9qZWN0ID0gcmVzLmRhdGFcbi8vICAgICAgICAgY29uc29sZS5sb2coJyRzY29wZS5jdXJyZW50VXNlci5faWQ6ICcsICRzY29wZS5jdXJyZW50VXNlci5faWQpXG4vLyAgICAgICAgIGNvbnNvbGUubG9nKCckc2NvcGUucHJvamVjdC5hdXRob3I6ICcsICRzY29wZS5wcm9qZWN0LmF1dGhvcilcbi8vICAgICAgICAgdmFyIGF1dGhvcnMgPSByZXMuZGF0YS5hdXRob3Jcbi8vICAgICAgICAgZm9yICh2YXIgYXV0aG9yIGluIGF1dGhvcnMpIHtcbi8vICAgICAgICAgICAgIGlmICgkc2NvcGUuY3VycmVudFVzZXIuX2lkID09IGF1dGhvcnNbYXV0aG9yXS5faWQpIHtcbi8vICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLnN0YXRlLmlzQXV0aG9yID0gdHJ1ZTtcbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgfVxuLy8gICAgIH0sIGVyciA9PiB7XG4vLyAgICAgICAgIGNvbnNvbGUubG9nKCdlcnIgd2hlbiBnZXQgdGhpcyBwcm9qZWN0OiAnLCBlcnIpO1xuLy8gICAgIH0pXG4vLyAgICAgJHNjb3BlLmxpa2UgPSAobGlrZXJJZCwgcHJvamVjdElkKSA9PiB7XG4vLyAgICAgICAgIGNvbnNvbGUubG9nKGxpa2VySWQsICdjbGlja3MgbGlrZUJ0biBvZicsIHByb2plY3RJZCk7XG4vLyAgICAgICAgIGlmICgkc2NvcGUuc3RhdGUuaXNBdXRob3IpIHtcbi8vICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdsaWtlRXZlbnQgdHJpZ2dlcmVkJylcbi8vICAgICAgICAgICAgIFByb2plY3QubGlrZShwcm9qZWN0SWQsIGxpa2VySWQpLnRoZW4ocmVzID0+IHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZXM6ICcsIHJlcyk7XG4vLyAgICAgICAgICAgICAgICAgLy8gICAgICAgICBpZiAocmVzLmRhdGEuZXZlbnRUeXBlID09ICdmb2xsb3cnKSB7XG4vLyAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgY29uc29sZS5sb2coJ2NoZWNrJyk7XG4vLyAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgY29uc29sZS5sb2coJ2ZvbGx3aW5nOiByZXMsICcsIHJlcy5kYXRhKVxuLy8gICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIHZhciBmb2xsb3dlciA9IHJlcy5kYXRhLmZvbGxvd2VyXG4vLyAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgdmFyIGZvbGxvd2luZ1JlY2VpdmVyID0gcmVzLmRhdGEuZm9sbG93aW5nUmVjZWl2ZXJcbi8vICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAkc2NvcGUudXNlci5mb2xsb3dlcnNMaXN0LnB1c2goZm9sbG93ZXIpXG4vLyAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgY2hlY2tGb2xsb3dTdGF0dXMoKVxuLy8gICAgICAgICAgICAgICAgIC8vICAgICAgICAgfSBlbHNlIGlmIChyZXMuZGF0YS5ldmVudFR5cGUgPT0gJ3VuZm9sbG93Jykge1xuLy8gICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjaGVjaycpO1xuLy8gICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd1bmZvbGx3aW5nOiByZXMsICcsIHJlcy5kYXRhKVxuLy8gICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIHZhciB1bmZvbGxvd2VyID0gcmVzLmRhdGEudW5mb2xsb3dlclxuLy8gICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIHZhciB1bmZvbGxvd2luZ1JlY2VpdmVyID0gcmVzLmRhdGEudW5mb2xsb3dpbmdSZWNlaXZlclxuLy8gICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIHZhciBpbmRleCA9ICRzY29wZS51c2VyLmZvbGxvd2Vyc0xpc3QuaW5kZXhPZihmb2xsb3dlcilcbi8vICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAkc2NvcGUudXNlci5mb2xsb3dlcnNMaXN0LnNwbGljZShpbmRleCwgMSlcbi8vICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICBjaGVja0ZvbGxvd1N0YXR1cygpXG4vLyAgICAgICAgICAgICAgICAgLy8gICAgICAgICB9XG4vLyAgICAgICAgICAgICB9LCBlcnIgPT4ge1xuLy8gICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnIgd2hlbiBsaWtlL3VubGlrZTogJywgZXJyKVxuLy8gICAgICAgICAgICAgfSlcbi8vICAgICAgICAgfVxuLy8gICAgIH1cbi8vIH1cbi8vXG4vLyBmdW5jdGlvbiBwcm9maWxlU2V0dGluZ0N0cmwoJHNjb3BlLCAkaHR0cCwgJHN0YXRlUGFyYW1zLCBBY2NvdW50LCAkc3RhdGUsICR3aW5kb3csIFVwbG9hZCwgJGxvY2F0aW9uKSB7XG4vLyAgICAgY29uc29sZS5sb2coJ3Byb2ZpbGVTZXR0aW5nQ3RybCBsb2FkZWQnKTtcbi8vXG4vLyAgICAgaWYgKCRzdGF0ZVBhcmFtcy51c2VySWQgPT0gJHNjb3BlLmN1cnJlbnRVc2VyLl9pZCkge1xuLy8gICAgICAgICAvLyBjb25zb2xlLmxvZygnaXNBdXRoVXNlcicpO1xuLy8gICAgICAgICAkc2NvcGUudXBkYXRlVXNlckRhdGEgPSBhbmd1bGFyLmNvcHkoJHNjb3BlLmN1cnJlbnRVc2VyKTtcbi8vICAgICB9IGVsc2Uge1xuLy8gICAgICAgICAvLyBjb25zb2xlLmxvZygnaXMgbm90IEF1dGhVc2VyJyk7XG4vLyAgICAgICAgICRzdGF0ZS5nbygnaG9tZScpO1xuLy8gICAgIH1cbi8vICAgICAkc2NvcGUuaW5pdCA9ICgpID0+IHtcbi8vICAgICAgICAgdmFyIGNoZWNrVXJsID0gJGxvY2F0aW9uLiQkcGF0aC5pbmNsdWRlcygnZGFuZ2VyJykgfHwgJGxvY2F0aW9uLiQkcGF0aC5pbmNsdWRlcygncmVxdWVzdCcpIHx8ICRsb2NhdGlvbi4kJHBhdGguaW5jbHVkZXMoJ3ByaXZhY3knKVxuLy8gICAgICAgICBpZiAoIWNoZWNrVXJsKSB7XG4vLyAgICAgICAgICAgICAkc3RhdGUuZ28oJ3Byb2ZpbGVTZXR0aW5nX2dlbmVyYWwnKTtcbi8vICAgICAgICAgfVxuLy8gICAgIH07XG4vL1xuLy8gICAgICRzY29wZS51cGRhdGVVc2VyRGF0YVN1Ym1pdHRlZCA9ICgpID0+IHtcbi8vICAgICAgICAgdmFyIHVyaVVzZXJJZCA9ICRzY29wZS51cGRhdGVVc2VyRGF0YS5faWQ7XG4vLyAgICAgICAgIHZhciB1cGRhdGVVc2VyRGF0YSA9ICRzY29wZS51cGRhdGVVc2VyRGF0YTtcbi8vICAgICAgICAgQWNjb3VudC51cGRhdGVVc2VyRGF0YSh1cmlVc2VySWQsIHVwZGF0ZVVzZXJEYXRhKS50aGVuKHJlcyA9PiB7XG4vLyAgICAgICAgICAgICAkc2NvcGUudXBkYXRlVXNlckRhdGEgPSByZXMuZGF0YTtcbi8vICAgICAgICAgICAgICR3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4vLyAgICAgICAgIH0sIGVyciA9PiB7XG4vLyAgICAgICAgICAgICBjb25zb2xlLmxvZygnZXJyIHdoZW4gZ2V0IHVwZGF0ZSB1c2VyIGRhdGE6ICcsIGVycik7XG4vLyAgICAgICAgIH0pXG4vLyAgICAgfVxuLy8gICAgICRzY29wZS5waG90b1VwbG9hZGluZyA9IGZhbHNlXG4vLyAgICAgJHNjb3BlLnVwbG9hZEZpbGVzID0gKGZpbGUpID0+IHtcbi8vICAgICAgICAgJHNjb3BlLnBob3RvVXBsb2FkaW5nID0gdHJ1ZTtcbi8vICAgICAgICAgdmFyIGZpbGUgPSBmaWxlWzBdXG4vLyAgICAgICAgIHZhciB1c2VySWQgPSAkc2NvcGUuY3VycmVudFVzZXIuX2lkO1xuLy8gICAgICAgICBjb25zb2xlLmxvZygncGhvdG86ICcsIGZpbGUpO1xuLy8gICAgICAgICBpZiAoZmlsZSkge1xuLy8gICAgICAgICAgICAgVXBsb2FkLnVwbG9hZCh7XG4vLyAgICAgICAgICAgICAgICAgdXJsOiBgL2FwaS91cGxvYWQvJHt1c2VySWR9YCxcbi8vICAgICAgICAgICAgICAgICBkYXRhOiB7XG4vLyAgICAgICAgICAgICAgICAgICAgIG5ld0ZpbGU6IGZpbGVcbi8vICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICB9KS50aGVuKHJlcyA9PiB7XG4vLyAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JlcyBhZnRlciB1cGxvYWQ6ICcsIHJlcy5kYXRhKTtcbi8vICAgICAgICAgICAgICAgICAkd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuLy8gICAgICAgICAgICAgfSwgZXJyID0+IHtcbi8vICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZXJyIHdoZW4gdXBsb2FkIGZpbGU6ICcsIGVycik7XG4vLyAgICAgICAgICAgICB9KVxuLy8gICAgICAgICB9XG4vLyAgICAgfVxuLy9cbi8vIH1cbi8vXG4vLyBmdW5jdGlvbiBwcGFnZUN0cmwoJHNjb3BlLCAkc3RhdGUsICRyb290U2NvcGUsICRzdGF0ZVBhcmFtcywgUHJvamVjdCwgQWNjb3VudCwgJHRpbWVvdXQsICRsb2NhdGlvbikge1xuLy8gICAgIGNvbnNvbGUubG9nKCdwcGFnZUN0cmwgbG9hZGVkJylcbi8vICAgICAkc2NvcGUuc3RhdGUgPSB7fVxuLy8gICAgICRzY29wZS5zdGF0ZS5pc1RoZVVzZXIgPSBmYWxzZVxuLy8gICAgICRzY29wZS5zdGF0ZS5mb2xsb3dTdGF0dXMgPSBmYWxzZVxuLy8gICAgIHZhciBkaXNwbGF5VXNlcjtcbi8vICAgICB2YXIgdXJpVXNlcklkID0gJHN0YXRlUGFyYW1zLnVzZXJJZDtcbi8vICAgICBpZiAodXJpVXNlcklkID09ICRzY29wZS5jdXJyZW50VXNlci5faWQpIHtcbi8vICAgICAgICAgJHNjb3BlLnN0YXRlLmlzVGhlVXNlciA9IHRydWU7XG4vLyAgICAgfVxuLy8gICAgIGlmICgkc2NvcGUuc3RhdGUuaXNUaGVVc2VyKSB7XG4vLyAgICAgICAgIGNvbnNvbGUubG9nKCdpc1RoZVVzZXInKVxuLy8gICAgIH0gZWxzZSB7XG4vLyAgICAgICAgIGNvbnNvbGUubG9nKCdpcyBub3QgVGhlVXNlcicpXG4vLyAgICAgfVxuLy8gICAgICRzY29wZS5pbml0ID0gKCkgPT4ge1xuLy8gICAgICAgICBjaGVja2luZ1VybCgpXG4vLyAgICAgfVxuLy9cbi8vICAgICBmdW5jdGlvbiBjaGVja2luZ1VybCgpIHtcbi8vICAgICAgICAgdmFyIGNoZWNrVXJsID0gJGxvY2F0aW9uLiQkcGF0aC5pbmNsdWRlcygnc3RhcnJlZCcpIHx8ICRsb2NhdGlvbi4kJHBhdGguaW5jbHVkZXMoJ2ZvbGxvd2VycycpXG4vLyAgICAgICAgIGlmICghY2hlY2tVcmwpIHtcbi8vICAgICAgICAgICAgICRzdGF0ZS5nbygncHBhZ2VfcHJvamVjdHMnKTtcbi8vICAgICAgICAgfVxuLy8gICAgIH1cbi8vICAgICBBY2NvdW50LmdldFVzZXJEYXRhKHVyaVVzZXJJZCkudGhlbihyZXMgPT4ge1xuLy8gICAgICAgICAkc2NvcGUudXNlciA9IHJlcy5kYXRhXG4vLyAgICAgICAgIGRpc3BsYXlVc2VyID0gcmVzLmRhdGFcbi8vICAgICAgICAgJHNjb3BlLnByb2plY3RzID0gcmVzLmRhdGEucHJvamVjdHMucmV2ZXJzZSgpO1xuLy8gICAgICAgICBjb25zb2xlLmxvZygnY2FyZHMgaGVyZTogJywgcmVzLmRhdGEucHJvamVjdHMpO1xuLy8gICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbi8vICAgICAgICAgICAgIGNoZWNrRm9sbG93U3RhdHVzKClcbi8vICAgICAgICAgfSwgMClcbi8vICAgICB9LCBlcnIgPT4ge1xuLy8gICAgICAgICBjb25zb2xlLmxvZygnZXJyIHdoZW4gZ2V0IHVzZXJEYXRhOiAnLCBlcnIpO1xuLy8gICAgIH0pXG4vL1xuLy8gICAgICRzY29wZS5jcmVhdGVUaW1lID0gKGNyZWF0ZUF0VGltZSkgPT4ge1xuLy8gICAgICAgICByZXR1cm4gbW9tZW50KGNyZWF0ZUF0VGltZSkuZnJvbU5vdygpO1xuLy8gICAgIH1cbi8vXG4vLyAgICAgJHNjb3BlLmZvbGxvdyA9IChjdXJyZW50VXNlciwgZm9sbG93VGFyZ2V0KSA9PiB7XG4vLyAgICAgICAgIGNvbnNvbGUubG9nKCdmZmZmZmYnKTtcbi8vICAgICAgICAgY29uc29sZS5sb2coY3VycmVudFVzZXIsIGZvbGxvd1RhcmdldCk7XG4vLyAgICAgICAgIGlmIChjdXJyZW50VXNlciAhPT0gZm9sbG93VGFyZ2V0ICYmIGZvbGxvd1RhcmdldCA9PSB1cmlVc2VySWQpIHtcbi8vICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdmb2xsb3dFdmVudCB0cmlnZ2VyZWQnKVxuLy8gICAgICAgICAgICAgQWNjb3VudC5mb2xsb3coY3VycmVudFVzZXIsIGZvbGxvd1RhcmdldCkudGhlbihyZXMgPT4ge1xuLy8gICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZXM6ICcsIHJlcyk7XG4vLyAgICAgICAgICAgICAgICAgaWYgKHJlcy5kYXRhLmV2ZW50VHlwZSA9PSAnZm9sbG93Jykge1xuLy8gICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnY2hlY2snKTtcbi8vICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2ZvbGx3aW5nOiByZXMsICcsIHJlcy5kYXRhKVxuLy8gICAgICAgICAgICAgICAgICAgICB2YXIgZm9sbG93ZXIgPSByZXMuZGF0YS5mb2xsb3dlclxuLy8gICAgICAgICAgICAgICAgICAgICB2YXIgZm9sbG93aW5nUmVjZWl2ZXIgPSByZXMuZGF0YS5mb2xsb3dpbmdSZWNlaXZlclxuLy8gICAgICAgICAgICAgICAgICAgICAkc2NvcGUudXNlci5mb2xsb3dlcnNMaXN0LnB1c2goZm9sbG93ZXIpXG4vLyAgICAgICAgICAgICAgICAgICAgIGNoZWNrRm9sbG93U3RhdHVzKClcbi8vICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlcy5kYXRhLmV2ZW50VHlwZSA9PSAndW5mb2xsb3cnKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjaGVjaycpO1xuLy8gICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygndW5mb2xsd2luZzogcmVzLCAnLCByZXMuZGF0YSlcbi8vICAgICAgICAgICAgICAgICAgICAgdmFyIHVuZm9sbG93ZXIgPSByZXMuZGF0YS51bmZvbGxvd2VyXG4vLyAgICAgICAgICAgICAgICAgICAgIHZhciB1bmZvbGxvd2luZ1JlY2VpdmVyID0gcmVzLmRhdGEudW5mb2xsb3dpbmdSZWNlaXZlclxuLy8gICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAkc2NvcGUudXNlci5mb2xsb3dlcnNMaXN0LmluZGV4T2YoZm9sbG93ZXIpXG4vLyAgICAgICAgICAgICAgICAgICAgICRzY29wZS51c2VyLmZvbGxvd2Vyc0xpc3Quc3BsaWNlKGluZGV4LCAxKVxuLy8gICAgICAgICAgICAgICAgICAgICBjaGVja0ZvbGxvd1N0YXR1cygpXG4vLyAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgfSwgZXJyID0+IHtcbi8vICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZXJyIHdoZW4gZm9sbG93L3VuZm9sbG93OiAnLCBlcnIpXG4vLyAgICAgICAgICAgICB9KVxuLy8gICAgICAgICB9XG4vLyAgICAgfVxuLy8gICAgIHZhciBjaGVja0ZvbGxvd1N0YXR1cyA9ICgpID0+IHtcbi8vICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjaGVja0ZvbGxvd1N0YXR1cyB0cmlnZXJyZWQnKTtcbi8vICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkaXNwbGF5VXNlcjogJywgZGlzcGxheVVzZXIpO1xuLy8gICAgICAgICAgICAgaWYgKGRpc3BsYXlVc2VyLmZvbGxvd2Vyc0xpc3QubGVuZ3RoID4gMCkge1xuLy8gICAgICAgICAgICAgICAgIHZhciBmb2xsb3dlcnNMaXN0ID0gZGlzcGxheVVzZXIuZm9sbG93ZXJzTGlzdFxuLy8gICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjaGVja2VkJyk7XG4vLyAgICAgICAgICAgICAgICAgZm9yICh2YXIgZm9sbG93ZXIgaW4gZm9sbG93ZXJzTGlzdCkge1xuLy8gICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnY3VycmVudFVzZXI6ICcsICRzY29wZS5jdXJyZW50VXNlci5faWQpO1xuLy8gICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZm9sbG93ZXJzTGlzdFtmb2xsb3dlcl0uX2lkOiAnLCBmb2xsb3dlcnNMaXN0W2ZvbGxvd2VyXS5faWQpO1xuLy8gICAgICAgICAgICAgICAgICAgICBpZiAoZm9sbG93ZXJzTGlzdFtmb2xsb3dlcl0uX2lkID09ICRzY29wZS5jdXJyZW50VXNlci5faWQpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGF0ZS5mb2xsb3dTdGF0dXMgPSB0cnVlXG4vLyAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdGUuZm9sbG93U3RhdHVzID0gZmFsc2Vcbi8vICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgIH0gZWxzZSB7XG4vLyAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YXRlLmZvbGxvd1N0YXR1cyA9IGZhbHNlXG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgIH1cbi8vICAgICAgICAgLy8gY2hlY2tGb2xsb3dTdGF0dXMoKVxuLy8gfVxuLy9cbi8vIGZ1bmN0aW9uIG5hdkN0cmwoJGh0dHAsICRzY29wZSwgJGF1dGgsIEFjY291bnQsICRyb290U2NvcGUsICR0aW1lb3V0LCAkd2luZG93LCAkc3RhdGUsIGZvY3VzLCBQcm9qZWN0LCAkbG9jYXRpb24pIHtcbi8vICAgICAvLyBjb25zb2xlLmxvZygnbmF2Q3RybCBsb2FkZWQnKTtcbi8vICAgICAkc2NvcGUuY3VycmVudFVzZXIgPSAnJztcbi8vICAgICAkc2NvcGUubG9naW5sb2FkaW5nID0gZmFsc2U7XG4vLyAgICAgJHNjb3BlLmxvZ291dGxvYWRpbmcgPSBmYWxzZTtcbi8vICAgICAkcm9vdFNjb3BlLmhpZGVOYXYgPSBmYWxzZTtcbi8vICAgICAkcm9vdFNjb3BlLmNyZWF0ZU1vZGFsID0gZmFsc2U7XG4vL1xuLy8gICAgICRzY29wZS5hdXRoZW50aWNhdGUgPSAocHJvdmlkZXIpID0+IHtcbi8vICAgICAgICAgICAgICRzY29wZS5sb2dpbmxvYWRpbmcgPSB0cnVlO1xuLy8gICAgICAgICAgICAgJGF1dGguYXV0aGVudGljYXRlKHByb3ZpZGVyKS50aGVuKGRhdGEgPT4ge1xuLy8gICAgICAgICAgICAgICAgIEFjY291bnQuZ2V0Q3VycmVudFVzZXIoKS50aGVuKHJlcyA9PiB7XG4vLyAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd1c2VyIGxvZ2dlZCBpbjogJywgcmVzLmRhdGEpO1xuLy8gICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY3VycmVudFVzZXIgPSByZXMuZGF0YTtcbi8vICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxvZ2lubG9hZGluZyA9IGZhbHNlO1xuLy8gICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnJHNjb3BlLmN1cnJlbnRVc2VyLl9pZDogJywgJHNjb3BlLmN1cnJlbnRVc2VyLl9pZCk7XG4vLyAgICAgICAgICAgICAgICAgICAgIGlmICgkc3RhdGUuY3VycmVudC5uYW1lID09ICdob21lJykge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdwcGFnZScsIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VySWQ6ICRzY29wZS5jdXJyZW50VXNlci5faWRcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuLy8gICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbi8vICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgIH0sIGVyciA9PiB7XG4vLyAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd1c2VyIGlzIG5vdCBsb2dnZWQgaW4uJyk7XG4vLyAgICAgICAgICAgICAgICAgfSlcbi8vICAgICAgICAgICAgIH0sIGVyciA9PiB7XG4vLyAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2VyciB3aGVuIGxvZyB1c2VyIGluOiAnLCBlcnIpO1xuLy8gICAgICAgICAgICAgfSlcbi8vICAgICAgICAgfVxuLy8gICAgICAgICAvLyBjb25zb2xlLmxvZygnJGF1dGguaXNBdXRoZW50aWNhdGVkKCkpOiAnLCAkYXV0aC5pc0F1dGhlbnRpY2F0ZWQoKSkpO1xuLy8gICAgIGlmICgkYXV0aC5pc0F1dGhlbnRpY2F0ZWQoKSkge1xuLy8gICAgICAgICBBY2NvdW50LmdldEN1cnJlbnRVc2VyKCkudGhlbihyZXMgPT4ge1xuLy8gICAgICAgICAgICAgJHNjb3BlLmN1cnJlbnRVc2VyID0gcmVzLmRhdGE7XG4vLyAgICAgICAgICAgICBjb25zb2xlLmxvZygnbmF2Q3RybCB0cmlnZ2VyZWQgYW5kIGN1cnJlbnRVc2VyOiAnLCAkc2NvcGUuY3VycmVudFVzZXIpO1xuLy8gICAgICAgICB9LCBlcnIgPT4ge1xuLy8gICAgICAgICAgICAgY29uc29sZS5sb2coJ3VzZXIgaXMgbm90IGxvZ2dlZCBpbi4nKTtcbi8vICAgICAgICAgfSlcbi8vICAgICB9XG4vL1xuLy8gICAgICRzY29wZS5pc0F1dGhlbnRpY2F0ZWQgPSAoKSA9PiB7XG4vLyAgICAgICAgIHJldHVybiAkYXV0aC5pc0F1dGhlbnRpY2F0ZWQoKTtcbi8vICAgICB9XG4vL1xuLy8gICAgICRzY29wZS5sb2dvdXQgPSAoKSA9PiB7XG4vLyAgICAgICAgICRzY29wZS5sb2dvdXRsb2FkaW5nID0gdHJ1ZTtcbi8vICAgICAgICAgJGF1dGgubG9nb3V0KCk7XG4vLyAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuLy8gICAgICAgICAgICAgJHNjb3BlLmxvZ291dGxvYWRpbmcgPSBmYWxzZTtcbi8vICAgICAgICAgICAgIC8vICRzdGF0ZS5nbygnaG9tZScpO1xuLy8gICAgICAgICAgICAgJHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbi8vICAgICAgICAgfSwgMClcbi8vICAgICB9XG4vL1xuLy8gICAgICRzY29wZS5nb3BwYWdlID0gKCkgPT4ge1xuLy8gICAgICAgICBjb25zb2xlLmxvZygnJGxvY2F0aW9uLiQkcGF0aDogJywgJGxvY2F0aW9uLiQkcGF0aCk7XG4vLyAgICAgICAgIGlmICgkbG9jYXRpb24uJCRwYXRoLmluY2x1ZGVzKCdwcm9qZWN0cycpKSB7XG4vLyAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnc3RheSBvbiB0aGUgcGFnZSwgb3IgcmVmcmVzaCB0aGUgcGFnZScpXG4vLyAgICAgICAgICAgICAkd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpXG4vLyAgICAgICAgIH0gZWxzZSB7XG4vLyAgICAgICAgICAgICAkc3RhdGUuZ28oJ3BwYWdlJywge1xuLy8gICAgICAgICAgICAgICAgIHVzZXJJZDogJHNjb3BlLmN1cnJlbnRVc2VyLl9pZFxuLy8gICAgICAgICAgICAgfSlcbi8vICAgICAgICAgfVxuLy8gICAgIH1cbi8vXG4vLyAgICAgJHNjb3BlLmNyZWF0ZSA9ICgpID0+IHtcbi8vICAgICAgICAgJHNjb3BlLnByb2plY3RJbml0YWxpemluZyA9IGZhbHNlO1xuLy8gICAgICAgICAkc2NvcGUubmV3UHJvamVjdE5hbWUgPSAnJztcbi8vICAgICAgICAgJHNjb3BlLm5ld1Byb2plY3RQaXRjaCA9ICcnO1xuLy8gICAgICAgICAkc2NvcGUuY3JlYXRlTW9kYWwgPSB0cnVlO1xuLy8gICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbi8vICAgICAgICAgICAgIGZvY3VzKCdmb2N1c01lJyk7XG4vLyAgICAgICAgIH0sIDEwMClcbi8vICAgICB9XG4vLyAgICAgJHNjb3BlLmNyZWF0ZVByb2plY3QgPSAoKSA9PiB7XG4vLyAgICAgICAgICRzY29wZS5wcm9qZWN0SW5pdGFsaXppbmcgPSB0cnVlO1xuLy8gICAgICAgICBjb25zb2xlLmxvZygnY3JlYXRlIHByb2plY3QgY2FsbGVkOiAnLCAkc2NvcGUubmV3UHJvamVjdE5hbWUpO1xuLy8gICAgICAgICB2YXIgbmV3UG9qZWN0T2JqID0ge1xuLy8gICAgICAgICAgICAgdGl0bGU6ICRzY29wZS5uZXdQcm9qZWN0TmFtZSxcbi8vICAgICAgICAgICAgIHBpdGNoOiAkc2NvcGUubmV3UHJvamVjdFBpdGNoXG4vLyAgICAgICAgIH1cbi8vICAgICAgICAgUHJvamVjdC5jcmVhdGVPbmUobmV3UG9qZWN0T2JqKS50aGVuKHJlcyA9PiB7XG4vLyAgICAgICAgICAgICBjb25zb2xlLmxvZygnYWRkIG5ldyBiZWhhdmlvcltjcmVhdGVOZXdQcm9qZWN0XTogJywgcmVzLmRhdGEpO1xuLy8gICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4vLyAgICAgICAgICAgICAgICAgJHNjb3BlLnByb2plY3RJbml0YWxpemluZyA9IGZhbHNlO1xuLy8gICAgICAgICAgICAgICAgICRzY29wZS5jcmVhdGVNb2RhbCA9IGZhbHNlO1xuLy8gICAgICAgICAgICAgICAgIGlmICgkc3RhdGUuY3VycmVudC5uYW1lID09ICdwcGFnZScpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbi8vICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuLy8gICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ3BwYWdlJywge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgdXNlcklkOiAkc2NvcGUuY3VycmVudFVzZXIuX2lkXG4vLyAgICAgICAgICAgICAgICAgICAgIH0pO1xuLy8gICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgIH0sIE1hdGgucmFuZG9tKCkgKiAxNTAwICsgMzAwKTtcbi8vICAgICAgICAgfSwgZXJyID0+IHtcbi8vICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnIgd2hlbiBjcmVhdGUgcHJvamVjdDogJywgZXJyKTtcbi8vICAgICAgICAgfSlcbi8vICAgICB9XG4vLyB9XG4iLCIndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdwaW5jaEFwcCcpXG4gICAgLmRpcmVjdGl2ZSgnZm9jdXNPbicsIGZvY3VzT24pXG5cbmZ1bmN0aW9uIGZvY3VzT24oKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtLCBhdHRyKSB7XG4gICAgICAgIHNjb3BlLiRvbignZm9jdXNPbicsIGZ1bmN0aW9uKGUsIG5hbWUpIHtcbiAgICAgICAgICAgIGlmIChuYW1lID09PSBhdHRyLmZvY3VzT24pIHtcbiAgICAgICAgICAgICAgICBlbGVtWzBdLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdwaW5jaEFwcCcpXG4gICAgLmRpcmVjdGl2ZSgndG9vbFRpcCcsIHRvb2xUaXApXG5cbmZ1bmN0aW9uIHRvb2xUaXAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy50b29sLXRpcCcpLm9uKCdjbGljayBtb3VzZWxlYXZlJywgaGlkZVRvb2x0aXApO1xuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy50b29sLXRpcCcpLm9uKCdtb3VzZWVudGVyJywgc2hvd1Rvb2x0aXApO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGhpZGVUb29sdGlwKCkge1xuICAgICQodGhpcykudG9vbHRpcCgnaGlkZScpO1xufVxuXG5mdW5jdGlvbiBzaG93VG9vbHRpcCgpIHtcbiAgICAkKHRoaXMpLnRvb2x0aXAoJ3Nob3cnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
