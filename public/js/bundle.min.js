"use strict";function init(){console.log("jquery loaded"),sticky(),windowScrollDown()}function sticky(){$(".sticky").sticky({topSpacing:60})}function windowScrollDown(){var o,t=0;$(window).scroll(function(){o=$(this).scrollTop(),$(window).scrollTop()>30&&(t>o?($(".home-page nav").removeClass("folded"),$(".home-page nav").css("border-bottom","0px solid")):$(".home-page nav").addClass("folded")),t=o,$(window).scrollTop()<10&&$(".home-page nav").addClass("top"),$(window).scrollTop()>10&&$(".home-page nav").removeClass("top"),$(window).scrollTop()>30,$(window).scrollTop()<540&&$(".home-page nav").css("box-shadow","inset 0 -1px 0px 0px rgba(0,0,0,0)"),$(window).scrollTop()>540&&$(".home-page nav").css("box-shadow","inset 0 -1px 0px 0px rgba(0,0,0,0.1)")})}function Account(o){this.getCurrentUser=function(){return o({method:"GET",url:"/api/auth/currentUser"})},this.sendVerifyCode=function(t){return o({method:"POST",url:"/api/verify/phone",data:t})},this.verifyCode=function(t){return o({method:"PUT",url:"/api/verify/phone",data:t})},this.getUserData=function(t){return o({method:"GET",url:"/api/users/"+t})},this.updateUserData=function(t,e){return o({method:"PUT",url:"/api/users/"+t,data:e})}}function Payment(o){this.chargeNow=function(t){return o({method:"POST",url:"/api/payment/chargeNow",data:t})}}function focus(o,t){return function(e){t(function(){o.$broadcast("focusOn",e)},0)}}function focusOn(){return function(o,t,e){o.$on("focusOn",function(o,a){a===e.focusOn&&t[0].focus()})}}function toolTip(){return function(o,t,e){angular.element(".tool-tip").on("click mouseleave",hideTooltip),angular.element(".tool-tip").on("mouseenter",showTooltip)}}function hideTooltip(){$(this).tooltip("hide")}function showTooltip(){$(this).tooltip("show")}function homeCtrl(o){console.log("homeCtrl loaded"),o.previousState,o.currentState,o.$on("$stateChangeSuccess",function(t,e,a,n,r){o.previousState=n.name,o.currentState=e.name,console.log("Previous state:"+o.previousState),console.log("Current state:"+o.currentState)}),o.$on("animStart",function(o,t,e){}),o.$on("animEnd",function(o,t,e){})}function authCtrl(o,t,e,a,n){function r(){t.getToken()&&a.getCurrentUser(t.getToken()).then(function(t){console.log("res @getCurrentUser: ",t.data),o.currentUser=t.data},function(o){e.go("authEntrance")})}console.log("authCtrl loaded"),o.getCurrentUser=function(){r()},o.auth_enter=function(o){t.signup(o).then(function(o){t.setToken(o),e.go("dashboard",{},{reload:!0}),console.log("res @auth_enter: ",o.data),r()},function(o){console.log("err @auth_enter: ",o)})},o.authenticate=function(o){t.authenticate(o)},o.logout=function(){t.logout(),o.currentUser=null,e.go("home",{},{reload:!0}),n.location.reload()}}function dashboardCtrl(o,t,e,a,n,r,l){function s(t){o.verifyPhoneSentOut=!1;var e=Number(t.phone.verifyCode.expiredAt),a=Date.now();e>a&&(o.verifyPhoneSentOut=!0),o.verifyPhoneCountDown=function(){return""+e}}console.log("dashboardCtrl loaded"),a.getCurrentUser(t.getToken()).then(function(o){n.currentUser||(n.currentUser=o.data),console.log("res @getCurrentUser: ",o.data),s(o.data)},function(o){e.go("home")}),o.sendVerifyCode=function(t){if(console.log("phone: ",t),t.length>5){var e={userData:n.currentUser,phone:t};a.sendVerifyCode(e).then(function(e){console.log("res @sendVerifyCode: ",e.data),n.currentUser.phone.data=t,o.verifyPhoneSentOut=!0},function(o){console.log("err @sendVerifyCode: ",o)})}},o.verifyCode=function(o){if(console.log("code: ",o),0!==o.length){var t={userData:n.currentUser,code:o};a.verifyCode(t).then(function(o){console.log("res @verifyCode: ",o.data),n.currentUser.phone.verified=!0},function(o){console.log("err @verifyCode: ",o)})}},o.doCheckout=function(o){console.log("fff"),console.log("token: ",o);var t={stripeToken:o,userData:n.currentUser};r.chargeNow(t).then(function(o){console.log("res: ",o.data)},function(o){console.log("err: ",o)})},o.installmentsGraphData=[],o.updateTimes=function(t){o.installmentsGraphData=[];for(var e=0;t>e;e++){var a=~~(o.plan.total/t),n=~~(200*(2/t));o.installmentsGraphData.push({price:a,style:{height:n+"px",width:"90%"}})}}}angular.module("pinchApp",["ui.router","satellizer","ngAnimate","ngFileUpload","ngImgCrop","stripe.checkout","angular-loading-bar","anim-in-out"]).config(["$stateProvider","$urlRouterProvider","$authProvider",function(o,t,e){Stripe.setPublishableKey("pk_test_t1eThhOKl6esrp6f4jyWqU4J"),o.state(home).state(authEntrance).state(dashboard).state(dashboard_payment).state(dashboard_plan).state(dashboard_plan_start).state(dashboard_plan_choose).state(dashboard_plan_single).state(dashboard_plan_multiple).state(dashboard_account),t.otherwise("/")}]);var home={name:"home",url:"/",views:{main:{templateUrl:"/html/home.html",controller:"homeCtrl"}}},authEntrance={name:"authEntrance",url:"/entrance",views:{main:{templateUrl:"/html/entrance.html",controller:"authCtrl"}}},dashboard={name:"dashboard",url:"/dashboard",views:{main:{templateUrl:"/html/dashboard.html",controller:"dashboardCtrl"}}},dashboard_payment={name:"dashboard_payment",url:"/payment",parent:"dashboard",views:{dashboard_section:{templateUrl:"/html/dashboard_payment.html",controller:"dashboardCtrl"}}},dashboard_plan={name:"dashboard_plan",url:"/plan",parent:"dashboard",views:{dashboard_section:{templateUrl:"/html/dashboard_plan.html",controller:"dashboardCtrl"}}},dashboard_plan_start={name:"dashboard_plan_start",url:"/start",parent:"dashboard_plan",views:{dashboard_child_section:{templateUrl:"/html/dashboard/dashboard_plan_start.html",controller:"dashboardCtrl"}}},dashboard_plan_choose={name:"dashboard_plan_choose",url:"/choose",parent:"dashboard_plan",views:{dashboard_child_section:{templateUrl:"/html/dashboard/dashboard_plan_choose.html",controller:"dashboardCtrl"}}},dashboard_plan_single={name:"dashboard_plan_single",url:"/choose/single",parent:"dashboard_plan",views:{dashboard_child_section:{templateUrl:"/html/dashboard/dashboard_plan_single.html",controller:"dashboardCtrl"}}},dashboard_plan_multiple={name:"dashboard_plan_multiple",url:"/choose/mutiple",parent:"dashboard_plan",views:{dashboard_child_section:{templateUrl:"/html/dashboard/dashboard_plan_multiple.html",controller:"dashboardCtrl"}}},dashboard_account={name:"dashboard_account",url:"/account",parent:"dashboard",views:{dashboard_section:{templateUrl:"/html/dashboard_account.html",controller:"dashboardCtrl"}}};$(document).ready(init),Account.$inject=["$http"],Payment.$inject=["$http"],focus.$inject=["$rootScope","$timeout"],angular.module("pinchApp").service("Account",Account).service("Payment",Payment).factory("focus",focus),angular.module("pinchApp").directive("focusOn",focusOn),angular.module("pinchApp").directive("toolTip",toolTip),homeCtrl.$inject=["$rootScope"],authCtrl.$inject=["$scope","$auth","$state","Account","$window"],dashboardCtrl.$inject=["$scope","$auth","$state","Account","$rootScope","Payment","$interval"],angular.module("pinchApp").controller("homeCtrl",homeCtrl).controller("authCtrl",authCtrl).controller("dashboardCtrl",dashboardCtrl);
//# sourceMappingURL=data:application/json;base64,
