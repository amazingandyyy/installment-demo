"use strict";function init(){console.log("jquery loaded"),sticky(),windowScrollDown()}function sticky(){$(".sticky").sticky({topSpacing:60})}function windowScrollDown(){var e,o=0;$(window).scroll(function(){e=$(this).scrollTop(),o>e?($(".home-page nav").removeClass("folded"),$(".home-page nav").css("border-bottom","0px solid")):$(".home-page nav").addClass("folded"),o=e,$(window).scrollTop()<1&&$(".home-page nav").addClass("top"),$(window).scrollTop()>1&&$(".home-page nav").removeClass("top"),$(window).scrollTop()>30,$(window).scrollTop()<540&&$(".home-page nav").css("box-shadow","inset 0 -1px 0px 0px rgba(0,0,0,0)"),$(window).scrollTop()>540&&$(".home-page nav").css("box-shadow","inset 0 -1px 0px 0px rgba(0,0,0,0.1)")})}function Account(e){this.getCurrentUser=function(){return e({method:"GET",url:"/api/users/own"})},this.getUserData=function(o){return e({method:"GET",url:"/api/users/"+o})},this.updateUserData=function(o,t){return e({method:"PUT",url:"/api/users/"+o,data:t})},this.follow=function(o,t){return e({method:"PUT",url:"/api/users/event/follow",data:{currentUser:o,followTarget:t}})}}function Project(e){this.createOne=function(o){return e({method:"POST",url:"/api/projects/",data:o})},this.getAll=function(){return e({method:"GET",url:"/api/projects/all"})},this.getOnePorject=function(o){return e({method:"GET",url:"/api/projects/"+o})},this.deleteOne=function(o){return e({method:"DELETE",url:"/api/projects/"+o})},this.deleteOne=function(o){return e({method:"DELETE",url:"/api/projects/"+o})},this.like=function(o,t){return e({method:"PUT",url:"/api/projects/event/like",data:{projectId:o,likerId:t}})}}function focus(e,o){return function(t){o(function(){e.$broadcast("focusOn",t)},0)}}function focusOn(){return function(e,o,t){e.$on("focusOn",function(e,n){n===t.focusOn&&o[0].focus()})}}function toolTip(){return function(e,o,t){angular.element(".tool-tip").on("click mouseleave",hideTooltip),angular.element(".tool-tip").on("mouseenter",showTooltip)}}function hideTooltip(){$(this).tooltip("hide")}function showTooltip(){$(this).tooltip("show")}function homeCtrl(){console.log("homeCtrl loaded")}function projectSettingCtrl(e,o,t,n,r,l){console.log("projectSettingCtrl loaded");var c=!1,i=t.projectId;n.getOnePorject(i).then(function(o){console.log("projects: ",o.data),e.project=o.data,e.updateProjectData=e.project,e.project.author.forEach(function(o){o._id==e.currentUser._id&&(c=!0)}),c?console.log("isAuthor"):(console.log("is not Author"),r.go("home"))},function(e){console.log("err when get this project: ",e)}),e.request={people:[],supply:[],money:[]},e.init=function(){var e=l.$$path.includes("danger")||l.$$path.includes("request")||l.$$path.includes("privacy");e||r.go("projectSetting_general")},e.addChoiceToPeople=function(o){-1!==e.request.people.indexOf(o)?e.request.people.splice(e.request.people.indexOf(o),1):e.request.people.push(o),console.log(e.request.people)},e.addChoiceToSupply=function(o){-1!==e.request.supply.indexOf(o)?e.request.supply.splice(e.request.supply.indexOf(o),1):e.request.supply.push(o),console.log(e.request.supply)},e.addChoiceToMoney=function(o){-1!==e.request.money.indexOf(o)?(e.request.money.splice(e.request.money.indexOf(o),1),e.request.money=[]):(e.request.money=[],e.request.money.push(o)),console.log(e.request.money)},e.deleteProject=function(o){if(e.deleteProjectInput==o){var l=t.projectId;n.deleteOne(l).then(function(o){console.log("project deleted"),console.log("res: ",o.data),r.go("ppage",{userId:e.currentUser._id})},function(e){console.log("user is not logged in.")})}else console.log("no")},e.dangerNotified=!1,e.dangerNotifty=function(){e.dangerNotified=!e.dangerNotified},e.sameToTheProjectName=function(o){return e.deleteProjectInput==o},e.okayToDelete=function(o){return console.log("$scope.dangerNotified: ",e.dangerNotified),e.deleteProjectInput==o&&e.dangerNotified}}function projectpageCtrl(e,o,t,n){console.log("projectpageCtrl loaded"),e.state={},e.state.isAuthor=!1;var r=t.projectId;n.getOnePorject(r).then(function(o){console.log("projectData: ",o.data),e.project=o.data,console.log("$scope.currentUser._id: ",e.currentUser._id),console.log("$scope.project.author: ",e.project.author);var t=o.data.author;for(var n in t)if(e.currentUser._id==t[n]._id)return e.state.isAuthor=!0},function(e){console.log("err when get this project: ",e)}),e.like=function(o,t){console.log(o,"clicks likeBtn of",t),e.state.isAuthor&&(console.log("likeEvent triggered"),n.like(t,o).then(function(e){console.log("res: ",e)},function(e){console.log("err when like/unlike: ",e)}))}}function profileSettingCtrl(e,o,t,n,r,l,c,i){console.log("profileSettingCtrl loaded"),t.userId==e.currentUser._id?e.updateUserData=angular.copy(e.currentUser):r.go("home"),e.init=function(){var e=i.$$path.includes("danger")||i.$$path.includes("request")||i.$$path.includes("privacy");e||r.go("profileSetting_general")},e.updateUserDataSubmitted=function(){var o=e.updateUserData._id,t=e.updateUserData;n.updateUserData(o,t).then(function(o){e.updateUserData=o.data,l.location.reload()},function(e){console.log("err when get update user data: ",e)})},e.photoUploading=!1,e.uploadFiles=function(o){e.photoUploading=!0;var o=o[0],t=e.currentUser._id;console.log("photo: ",o),o&&c.upload({url:"/api/upload/"+t,data:{newFile:o}}).then(function(e){console.log("res after upload: ",e.data),l.location.reload()},function(e){console.log("err when upload file: ",e)})}}function ppageCtrl(e,o,t,n,r,l,c,i){function a(){var e=i.$$path.includes("starred")||i.$$path.includes("followers");e||o.go("ppage_projects")}console.log("ppageCtrl loaded"),e.state={},e.state.isTheUser=!1,e.state.followStatus=!1;var s,u=n.userId;u==e.currentUser._id&&(e.state.isTheUser=!0),e.state.isTheUser?console.log("isTheUser"):console.log("is not TheUser"),e.init=function(){a()},l.getUserData(u).then(function(o){e.user=o.data,s=o.data,e.projects=o.data.projects.reverse(),console.log("cards here: ",o.data.projects),c(function(){p()},0)},function(e){console.log("err when get userData: ",e)}),e.createTime=function(e){return moment(e).fromNow()},e.follow=function(o,t){console.log("ffffff"),console.log(o,t),o!==t&&t==u&&(console.log("followEvent triggered"),l.follow(o,t).then(function(o){if(console.log("res: ",o),"follow"==o.data.eventType){console.log("check"),console.log("follwing: res, ",o.data);var t=o.data.follower;o.data.followingReceiver;e.user.followersList.push(t),p()}else if("unfollow"==o.data.eventType){console.log("check"),console.log("unfollwing: res, ",o.data);var n=(o.data.unfollower,o.data.unfollowingReceiver,e.user.followersList.indexOf(t));e.user.followersList.splice(n,1),p()}},function(e){console.log("err when follow/unfollow: ",e)}))};var p=function(){if(console.log("checkFollowStatus trigerred"),console.log("displayUser: ",s),s.followersList.length>0){var o=s.followersList;console.log("checked");for(var t in o)console.log("currentUser: ",e.currentUser._id),console.log("followersList[follower]._id: ",o[t]._id),o[t]._id==e.currentUser._id?e.state.followStatus=!0:e.state.followStatus=!1}else e.state.followStatus=!1}}function navCtrl(e,o,t,n,r,l,c,i,a,s,u){o.currentUser="",o.loginloading=!1,o.logoutloading=!1,r.hideNav=!1,r.createModal=!1,o.authenticate=function(e){o.loginloading=!0,t.authenticate(e).then(function(e){n.getCurrentUser().then(function(e){console.log("user logged in: ",e.data),o.currentUser=e.data,o.loginloading=!1,console.log("$scope.currentUser._id: ",o.currentUser._id),"home"==i.current.name?i.go("ppage",{userId:o.currentUser._id}):c.location.reload()},function(e){console.log("user is not logged in.")})},function(e){console.log("err when log user in: ",e)})},t.isAuthenticated()&&n.getCurrentUser().then(function(e){o.currentUser=e.data,console.log("navCtrl triggered and currentUser: ",o.currentUser)},function(e){console.log("user is not logged in.")}),o.isAuthenticated=function(){return t.isAuthenticated()},o.logout=function(){o.logoutloading=!0,t.logout(),l(function(){o.logoutloading=!1,c.location.reload()},0)},o.goppage=function(){console.log("$location.$$path: ",u.$$path),u.$$path.includes("projects")?c.location.reload():i.go("ppage",{userId:o.currentUser._id})},o.create=function(){o.projectInitalizing=!1,o.newProjectName="",o.newProjectPitch="",o.createModal=!0,l(function(){a("focusMe")},100)},o.createProject=function(){o.projectInitalizing=!0,console.log("create project called: ",o.newProjectName);var e={title:o.newProjectName,pitch:o.newProjectPitch};s.createOne(e).then(function(e){console.log("add new behavior[createNewProject]: ",e.data),l(function(){o.projectInitalizing=!1,o.createModal=!1,"ppage"==i.current.name?c.location.reload():i.go("ppage",{userId:o.currentUser._id})},1500*Math.random()+300)},function(e){console.log("err when create project: ",e)})}}angular.module("pinchApp",["ui.router","satellizer","ngFileUpload","ngImgCrop"]).config(["$stateProvider","$urlRouterProvider","$authProvider",function(e,o,t){t.facebook({clientId:"298165113849366"}),e.state(home),o.otherwise("/")}]);var home={name:"home",url:"/",views:{main:{templateUrl:"/html/home.html",controller:"homeCtrl"}}};$(document).ready(init),Account.$inject=["$http"],Project.$inject=["$http"],focus.$inject=["$rootScope","$timeout"],angular.module("pinchApp").service("Account",Account).service("Project",Project).factory("focus",focus),angular.module("pinchApp").directive("focusOn",focusOn),angular.module("pinchApp").directive("toolTip",toolTip),navCtrl.$inject=["$http","$scope","$auth","Account","$rootScope","$timeout","$window","$state","focus","Project","$location"],ppageCtrl.$inject=["$scope","$state","$rootScope","$stateParams","Project","Account","$timeout","$location"],profileSettingCtrl.$inject=["$scope","$http","$stateParams","Account","$state","$window","Upload","$location"],projectpageCtrl.$inject=["$scope","$http","$stateParams","Project"],projectSettingCtrl.$inject=["$scope","$http","$stateParams","Project","$state","$location"],angular.module("pinchApp").controller("navCtrl",navCtrl).controller("homeCtrl",homeCtrl).controller("ppageCtrl",ppageCtrl).controller("profileSettingCtrl",profileSettingCtrl).controller("projectpageCtrl",projectpageCtrl).controller("projectSettingCtrl",projectSettingCtrl);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFtb2R1bGUuanMiLCJtYWluLmpzIiwic2VydmljZXMuanMiLCJkaXJlY3RpdmVzL2ZvY3VzT24uZGlyZWN0aXZlLmpzIiwiZGlyZWN0aXZlcy90b29sVGlwLmRpcmVjdGl2ZS5qcyIsImNvbnRyb2xsZXJzL2NvbnRyb2xsZXJzLmpzIl0sIm5hbWVzIjpbImluaXQiLCJjb25zb2xlIiwibG9nIiwic3RpY2t5Iiwid2luZG93U2Nyb2xsRG93biIsIiQiLCJ0b3BTcGFjaW5nIiwic3QiLCJsYXN0U2Nyb2xsVG9wIiwid2luZG93Iiwic2Nyb2xsIiwidGhpcyIsInNjcm9sbFRvcCIsInJlbW92ZUNsYXNzIiwiY3NzIiwiYWRkQ2xhc3MiLCJBY2NvdW50IiwiJGh0dHAiLCJnZXRDdXJyZW50VXNlciIsIm1ldGhvZCIsInVybCIsImdldFVzZXJEYXRhIiwidXJpVXNlcklkIiwidXBkYXRlVXNlckRhdGEiLCJkYXRhIiwiZm9sbG93IiwiY3VycmVudFVzZXIiLCJmb2xsb3dUYXJnZXQiLCJQcm9qZWN0IiwiY3JlYXRlT25lIiwibmV3UG9qZWN0T2JqIiwiZ2V0QWxsIiwiZ2V0T25lUG9yamVjdCIsInByb2plY3RJZCIsImRlbGV0ZU9uZSIsImxpa2UiLCJsaWtlcklkIiwiZm9jdXMiLCIkcm9vdFNjb3BlIiwiJHRpbWVvdXQiLCJuYW1lIiwiJGJyb2FkY2FzdCIsImZvY3VzT24iLCJzY29wZSIsImVsZW0iLCJhdHRyIiwiJG9uIiwiZSIsInRvb2xUaXAiLCJlbGVtZW50IiwiYXR0cnMiLCJhbmd1bGFyIiwib24iLCJoaWRlVG9vbHRpcCIsInNob3dUb29sdGlwIiwidG9vbHRpcCIsImhvbWVDdHJsIiwicHJvamVjdFNldHRpbmdDdHJsIiwiJHNjb3BlIiwiJHN0YXRlUGFyYW1zIiwiJHN0YXRlIiwiJGxvY2F0aW9uIiwiaXNBdXRob3IiLCJ0aGVuIiwicmVzIiwicHJvamVjdCIsInVwZGF0ZVByb2plY3REYXRhIiwiYXV0aG9yIiwiZm9yRWFjaCIsIl9pZCIsImdvIiwiZXJyIiwicmVxdWVzdCIsInBlb3BsZSIsInN1cHBseSIsIm1vbmV5IiwiY2hlY2tVcmwiLCIkJHBhdGgiLCJpbmNsdWRlcyIsImFkZENob2ljZVRvUGVvcGxlIiwiaW5kZXhPZiIsInNwbGljZSIsInB1c2giLCJhZGRDaG9pY2VUb1N1cHBseSIsImFkZENob2ljZVRvTW9uZXkiLCJkZWxldGVQcm9qZWN0IiwicHJvamVjdEZ1bGxOYW1lIiwiZGVsZXRlUHJvamVjdElucHV0IiwiX3Byb2plY3RJZCIsInVzZXJJZCIsImRhbmdlck5vdGlmaWVkIiwiZGFuZ2VyTm90aWZ0eSIsInNhbWVUb1RoZVByb2plY3ROYW1lIiwib2theVRvRGVsZXRlIiwicHJvamVjdHBhZ2VDdHJsIiwic3RhdGUiLCJhdXRob3JzIiwicHJvZmlsZVNldHRpbmdDdHJsIiwiJHdpbmRvdyIsIlVwbG9hZCIsImNvcHkiLCJ1cGRhdGVVc2VyRGF0YVN1Ym1pdHRlZCIsImxvY2F0aW9uIiwicmVsb2FkIiwicGhvdG9VcGxvYWRpbmciLCJ1cGxvYWRGaWxlcyIsImZpbGUiLCJ1cGxvYWQiLCJuZXdGaWxlIiwicHBhZ2VDdHJsIiwiY2hlY2tpbmdVcmwiLCJpc1RoZVVzZXIiLCJmb2xsb3dTdGF0dXMiLCJkaXNwbGF5VXNlciIsInVzZXIiLCJwcm9qZWN0cyIsInJldmVyc2UiLCJjaGVja0ZvbGxvd1N0YXR1cyIsImNyZWF0ZVRpbWUiLCJjcmVhdGVBdFRpbWUiLCJtb21lbnQiLCJmcm9tTm93IiwiZXZlbnRUeXBlIiwiZm9sbG93ZXIiLCJmb2xsb3dpbmdSZWNlaXZlciIsImZvbGxvd2Vyc0xpc3QiLCJpbmRleCIsInVuZm9sbG93ZXIiLCJ1bmZvbGxvd2luZ1JlY2VpdmVyIiwibGVuZ3RoIiwibmF2Q3RybCIsIiRhdXRoIiwibG9naW5sb2FkaW5nIiwibG9nb3V0bG9hZGluZyIsImhpZGVOYXYiLCJjcmVhdGVNb2RhbCIsImF1dGhlbnRpY2F0ZSIsInByb3ZpZGVyIiwiY3VycmVudCIsImlzQXV0aGVudGljYXRlZCIsImxvZ291dCIsImdvcHBhZ2UiLCJjcmVhdGUiLCJwcm9qZWN0SW5pdGFsaXppbmciLCJuZXdQcm9qZWN0TmFtZSIsIm5ld1Byb2plY3RQaXRjaCIsImNyZWF0ZVByb2plY3QiLCJ0aXRsZSIsInBpdGNoIiwiTWF0aCIsInJhbmRvbSIsIm1vZHVsZSIsImNvbmZpZyIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwiJGF1dGhQcm92aWRlciIsImZhY2Vib29rIiwiY2xpZW50SWQiLCJob21lIiwib3RoZXJ3aXNlIiwidmlld3MiLCJtYWluIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwiZG9jdW1lbnQiLCJyZWFkeSIsIiRpbmplY3QiLCJzZXJ2aWNlIiwiZmFjdG9yeSIsImRpcmVjdGl2ZSJdLCJtYXBwaW5ncyI6IkFBQUEsWUNJQSxTQUFTQSxRQUNMQyxRQUFRQyxJQUFJLGlCQUNaQyxTQUNBQyxtQkFHSixRQUFTRCxVQUNMRSxFQUFFLFdBQVdGLFFBQ1RHLFdBQVksS0FJcEIsUUFBU0Ysb0JBQ0wsR0FDSUcsR0FEQUMsRUFBZ0IsQ0FFcEJILEdBQUVJLFFBQVFDLE9BQU8sV0FFYkgsRUFBS0YsRUFBRU0sTUFBTUMsWUFDSkosRUFBTEQsR0FDQUYsRUFBRSxrQkFBa0JRLFlBQVksVUFDaENSLEVBQUUsa0JBQWtCUyxJQUFJLGdCQUFpQixjQUV6Q1QsRUFBRSxrQkFBa0JVLFNBQVMsVUFFakNQLEVBQWdCRCxFQUVaRixFQUFFSSxRQUFRRyxZQUFjLEdBQ3hCUCxFQUFFLGtCQUFrQlUsU0FBUyxPQUU3QlYsRUFBRUksUUFBUUcsWUFBYyxHQUN4QlAsRUFBRSxrQkFBa0JRLFlBQVksT0FFaENSLEVBQUVJLFFBQVFHLFlBQWMsR0FHeEJQLEVBQUVJLFFBQVFHLFlBQWMsS0FDeEJQLEVBQUUsa0JBQWtCUyxJQUFJLGFBQWMsc0NBRXRDVCxFQUFFSSxRQUFRRyxZQUFjLEtBQ3hCUCxFQUFFLGtCQUFrQlMsSUFBSSxhQUFjLDBDQ25DbEQsUUFBU0UsU0FBUUMsR0FDYk4sS0FBS08sZUFBaUIs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QU8sWUFDUGtCLFVBQVUsVUFBVy9ILFNDRjFCUyxRQUNLb0csT0FBTyxZQUNQa0IsVUFBVSxVQUFXekgsU0NGMUJrRixRQUFRb0MsU0FBVyxRQUFTLFNBQVUsUUFBUyxVQUFXLGFBQWMsV0FBWSxVQUFXLFNBQVUsUUFBUyxVQUFXLGFBQzdIekQsVUFBVXlELFNBQVcsU0FBVSxTQUFVLGFBQWMsZUFBZ0IsVUFBVyxVQUFXLFdBQVksYUFDekdyRSxtQkFBbUJxRSxTQUFXLFNBQVUsUUFBUyxlQUFnQixVQUFXLFNBQVUsVUFBVyxTQUFVLGFBQzNHeEUsZ0JBQWdCd0UsU0FBVyxTQUFVLFFBQVMsZUFBZ0IsV0FDOUQ3RyxtQkFBbUI2RyxTQUFXLFNBQVUsUUFBUyxlQUFnQixVQUFXLFNBQVUsYUFKdEZuSCxRQUNLb0csT0FBTyxZQUNQWSxXQUFXLFVBQVdqQyxTQUN0QmlDLFdBQVcsV0FBWTNHLFVBQ3ZCMkcsV0FBVyxZQUFhdEQsV0FDeEJzRCxXQUFXLHFCQUFzQmxFLG9CQUNqQ2tFLFdBQVcsa0JBQW1CckUsaUJBQzlCcUUsV0FBVyxxQkFBc0IxRyIsImZpbGUiOiJidW5kbGUubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyXG4gICAgLm1vZHVsZSgncGluY2hBcHAnLCBbXG4gICAgICAgICd1aS5yb3V0ZXInLFxuICAgICAgICAnc2F0ZWxsaXplcicsXG4gICAgICAgIC8vICd1aS5ib290c3RyYXAnLFxuICAgICAgICAnbmdGaWxlVXBsb2FkJyxcbiAgICAgICAgJ25nSW1nQ3JvcCdcbiAgICBdKVxuICAgIC5jb25maWcoZnVuY3Rpb24oJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlciwgJGF1dGhQcm92aWRlcikge1xuXG4gICAgJGF1dGhQcm92aWRlclxuICAgICAgICAuZmFjZWJvb2soe1xuICAgICAgICAgICAgY2xpZW50SWQ6ICcyOTgxNjUxMTM4NDkzNjYnXG4gICAgICAgIH0pO1xuXG4gICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgLnN0YXRlKGhvbWUpXG4gICAgICAgIC8vIC5zdGF0ZShwcGFnZSlcbiAgICAgICAgLy8gLnN0YXRlKHBwYWdlX3Byb2plY3RzKVxuICAgICAgICAvLyAuc3RhdGUocHBhZ2VfbGlrZWQpXG4gICAgICAgIC8vIC5zdGF0ZShwcGFnZV9mb2xsb3dlcnMpXG4gICAgICAgIC8vIC5zdGF0ZShwcm9qZWN0cGFnZSlcbiAgICAgICAgLy8gLnN0YXRlKHByb2plY3RTZXR0aW5nKVxuICAgICAgICAvLyAuc3RhdGUocHJvamVjdFNldHRpbmdfZ2VuZXJhbClcbiAgICAgICAgLy8gLnN0YXRlKHByb2plY3RTZXR0aW5nX3JlcXVlc3QpXG4gICAgICAgIC8vIC5zdGF0ZShwcm9qZWN0U2V0dGluZ19wcml2YWN5KVxuICAgICAgICAvLyAuc3RhdGUocHJvamVjdFNldHRpbmdfZGFuZ2VyKVxuICAgICAgICAvLyAuc3RhdGUocHJvZmlsZVNldHRpbmcpXG4gICAgICAgIC8vIC5zdGF0ZShwcm9maWxlU2V0dGluZ19nZW5lcmFsKVxuICAgICAgICAvLyAuc3RhdGUocHJvZmlsZVNldHRpbmdfcmVxdWVzdClcbiAgICAgICAgLy8gLnN0YXRlKHByb2ZpbGVTZXR0aW5nX3ByaXZhY3kpXG4gICAgICAgIC8vIC5zdGF0ZShwcm9maWxlU2V0dGluZ19kYW5nZXIpXG5cblxuICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy8nKTtcbn0pO1xuXG5cbmxldCBob21lID0ge1xuICAgIG5hbWU6ICdob21lJyxcbiAgICB1cmw6ICcvJyxcbiAgICB2aWV3czoge1xuICAgICAgICBtYWluOiB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9odG1sL2hvbWUuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnaG9tZUN0cmwnXG4gICAgICAgIH1cbiAgICB9XG59XG4vLyBsZXQgcHBhZ2UgPSB7XG4vLyAgICAgbmFtZTogJ3BwYWdlJyxcbi8vICAgICB1cmw6ICcvbS86dXNlcklkJyxcbi8vICAgICB2aWV3czoge1xuLy8gICAgICAgICAnbWFpbic6IHtcbi8vICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2h0bWwvcHBhZ2UuaHRtbCcsXG4vLyAgICAgICAgICAgICBjb250cm9sbGVyOiAncHBhZ2VDdHJsJ1xuLy8gICAgICAgICB9LFxuLy8gICAgICAgICAncmlnaHRfc2VjdGlvbic6IHtcbi8vICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2h0bWwvcHBhZ2VfcHJvamVjdHMuaHRtbCcsXG4vLyAgICAgICAgICAgICBjb250cm9sbGVyOiAncHBhZ2VDdHJsJ1xuLy8gICAgICAgICB9XG4vLyAgICAgfVxuLy8gfVxuLy9cbi8vIGxldCBwcGFnZV9wcm9qZWN0cyA9IHtcbi8vICAgICBuYW1lOiAncHBhZ2VfcHJvamVjdHMnLFxuLy8gICAgIHVybDogJy9wcm9qZWN0cycsXG4vLyAgICAgcGFyZW50OiAncHBhZ2UnLFxuLy8gICAgIHZpZXdzOiB7XG4vLyAgICAgICAgIHJpZ2h0X3NlY3Rpb246IHtcbi8vICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2h0bWwvcHBhZ2VfcHJvamVjdHMuaHRtbCcsXG4vLyAgICAgICAgICAgICBjb250cm9sbGVyOiAncHBhZ2VDdHJsJ1xuLy8gICAgICAgICB9XG4vLyAgICAgfVxuLy8gfVxuLy8gbGV0IHBwYWdlX2xpa2VkID0ge1xuLy8gICAgIG5hbWU6ICdwcGFnZV9saWtlZCcsXG4vLyAgICAgdXJsOiAnL2xpa2VkJyxcbi8vICAgICBwYXJlbnQ6ICdwcGFnZScsXG4vLyAgICAgdmlld3M6IHtcbi8vICAgICAgICAgcmlnaHRfc2VjdGlvbjoge1xuLy8gICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvaHRtbC9wcGFnZV9saWtlZC5odG1sJyxcbi8vICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdwcGFnZUN0cmwnXG4vLyAgICAgICAgIH1cbi8vICAgICB9XG4vLyB9XG4vLyBsZXQgcHBhZ2VfZm9sbG93ZXJzID0ge1xuLy8gICAgIG5hbWU6ICdwcGFnZV9mb2xsb3dlcnMnLFxuLy8gICAgIHVybDogJy9mb2xsb3dlcnMnLFxuLy8gICAgIHBhcmVudDogJ3BwYWdlJyxcbi8vICAgICB2aWV3czoge1xuLy8gICAgICAgICByaWdodF9zZWN0aW9uOiB7XG4vLyAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9odG1sL3BwYWdlX2ZvbGxvd2Vycy5odG1sJyxcbi8vICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdwcGFnZUN0cmwnXG4vLyAgICAgICAgIH1cbi8vICAgICB9XG4vLyB9XG4vLyBsZXQgcHJvamVjdHBhZ2UgPSB7XG4vLyAgICAgbmFtZTogJ3Byb2plY3RwYWdlJyxcbi8vICAgICB1cmw6ICcvOnByb2plY3RJZCcsXG4vLyAgICAgdmlld3M6IHtcbi8vICAgICAgICAgbWFpbjoge1xuLy8gICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvaHRtbC9wcm9qZWN0cGFnZS5odG1sJyxcbi8vICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdwcm9qZWN0cGFnZUN0cmwnXG4vLyAgICAgICAgIH1cbi8vICAgICB9XG4vLyB9XG4vLyBsZXQgcHJvamVjdFNldHRpbmcgPSB7XG4vLyAgICAgbmFtZTogJ3Byb2plY3RTZXR0aW5nJyxcbi8vICAgICB1cmw6ICcvcHJvamVjdC86cHJvamVjdElkL3NldHRpbmcnLFxuLy8gICAgIHZpZXdzOiB7XG4vLyAgICAgICAgIG1haW46IHtcbi8vICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2h0bWwvcHJvamVjdFNldHRpbmcuaHRtbCcsXG4vLyAgICAgICAgICAgICBjb250cm9sbGVyOiAncHJvamVjdFNldHRpbmdDdHJsJ1xuLy8gICAgICAgICB9XG4vLyAgICAgfVxuLy8gfVxuLy8gbGV0IHByb2plY3RTZXR0aW5nX2dlbmVyYWwgPSB7XG4vLyAgICAgbmFtZTogJ3Byb2plY3RTZXR0aW5nX2dlbmVyYWwnLFxuLy8gICAgIHVybDogJy9nZW5lcmFsJyxcbi8vICAgICBwYXJlbnQ6ICdwcm9qZWN0U2V0dGluZycsXG4vLyAgICAgdmlld3M6IHtcbi8vICAgICAgICAgcmlnaHRfc2VjdGlvbjoge1xuLy8gICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvaHRtbC9wcm9qZWN0U2V0dGluZ19nZW5lcmFsLmh0bWwnLFxuLy8gICAgICAgICAgICAgY29udHJvbGxlcjogJ3Byb2plY3RTZXR0aW5nQ3RybCdcbi8vICAgICAgICAgfVxuLy8gICAgIH1cbi8vIH1cbi8vIGxldCBwcm9qZWN0U2V0dGluZ19yZXF1ZXN0ID0ge1xuLy8gICAgIG5hbWU6ICdwcm9qZWN0U2V0dGluZ19yZXF1ZXN0Jyxcbi8vICAgICB1cmw6ICcvcmVxdWVzdCcsXG4vLyAgICAgcGFyZW50OiAncHJvamVjdFNldHRpbmcnLFxuLy8gICAgIHZpZXdzOiB7XG4vLyAgICAgICAgIHJpZ2h0X3NlY3Rpb246IHtcbi8vICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2h0bWwvcHJvamVjdFNldHRpbmdfcmVxdWVzdC5odG1sJyxcbi8vICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdwcm9qZWN0U2V0dGluZ0N0cmwnXG4vLyAgICAgICAgIH1cbi8vICAgICB9XG4vLyB9XG4vLyBsZXQgcHJvamVjdFNldHRpbmdfcHJpdmFjeSA9IHtcbi8vICAgICBuYW1lOiAncHJvamVjdFNldHRpbmdfcHJpdmFjeScsXG4vLyAgICAgdXJsOiAnL3ByaXZhY3knLFxuLy8gICAgIHBhcmVudDogJ3Byb2plY3RTZXR0aW5nJyxcbi8vICAgICB2aWV3czoge1xuLy8gICAgICAgICByaWdodF9zZWN0aW9uOiB7XG4vLyAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9odG1sL3Byb2plY3RTZXR0aW5nX3ByaXZhY3kuaHRtbCcsXG4vLyAgICAgICAgICAgICBjb250cm9sbGVyOiAncHJvamVjdFNldHRpbmdDdHJsJ1xuLy8gICAgICAgICB9XG4vLyAgICAgfVxuLy8gfVxuLy8gbGV0IHByb2plY3RTZXR0aW5nX2RhbmdlciA9IHtcbi8vICAgICBuYW1lOiAncHJvamVjdFNldHRpbmdfZGFuZ2VyJyxcbi8vICAgICB1cmw6ICcvZGFuZ2VyJyxcbi8vICAgICBwYXJlbnQ6ICdwcm9qZWN0U2V0dGluZycsXG4vLyAgICAgdmlld3M6IHtcbi8vICAgICAgICAgcmlnaHRfc2VjdGlvbjoge1xuLy8gICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvaHRtbC9wcm9qZWN0U2V0dGluZ19kYW5nZXIuaHRtbCcsXG4vLyAgICAgICAgICAgICBjb250cm9sbGVyOiAncHJvamVjdFNldHRpbmdDdHJsJ1xuLy8gICAgICAgICB9XG4vLyAgICAgfVxuLy8gfVxuLy8gbGV0IHByb2ZpbGVTZXR0aW5nID0ge1xuLy8gICAgIG5hbWU6ICdwcm9maWxlU2V0dGluZycsXG4vLyAgICAgdXJsOiAnL3VzZXIvOnVzZXJJZC9zZXR0aW5nJyxcbi8vICAgICB2aWV3czoge1xuLy8gICAgICAgICBtYWluOiB7XG4vLyAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9odG1sL3Byb2ZpbGVTZXR0aW5nLmh0bWwnLFxuLy8gICAgICAgICAgICAgY29udHJvbGxlcjogJ3Byb2ZpbGVTZXR0aW5nQ3RybCdcbi8vICAgICAgICAgfVxuLy8gICAgIH1cbi8vIH1cbi8vIGxldCBwcm9maWxlU2V0dGluZ19nZW5lcmFsID0ge1xuLy8gICAgIG5hbWU6ICdwcm9maWxlU2V0dGluZ19nZW5lcmFsJyxcbi8vICAgICB1cmw6ICcvZ2VuZXJhbCcsXG4vLyAgICAgcGFyZW50OiAncHJvZmlsZVNldHRpbmcnLFxuLy8gICAgIHZpZXdzOiB7XG4vLyAgICAgICAgIHJpZ2h0X3NlY3Rpb246IHtcbi8vICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2h0bWwvcHJvZmlsZVNldHRpbmdfZ2VuZXJhbC5odG1sJyxcbi8vICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdwcm9maWxlU2V0dGluZ0N0cmwnXG4vLyAgICAgICAgIH1cbi8vICAgICB9XG4vLyB9XG4vLyBsZXQgcHJvZmlsZVNldHRpbmdfcmVxdWVzdCA9IHtcbi8vICAgICBuYW1lOiAncHJvZmlsZVNldHRpbmdfcmVxdWVzdCcsXG4vLyAgICAgdXJsOiAnL3JlcXVlc3QnLFxuLy8gICAgIHBhcmVudDogJ3Byb2ZpbGVTZXR0aW5nJyxcbi8vICAgICB2aWV3czoge1xuLy8gICAgICAgICByaWdodF9zZWN0aW9uOiB7XG4vLyAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9odG1sL3Byb2ZpbGVTZXR0aW5nX3JlcXVlc3QuaHRtbCcsXG4vLyAgICAgICAgICAgICBjb250cm9sbGVyOiAncHJvZmlsZVNldHRpbmdDdHJsJ1xuLy8gICAgICAgICB9XG4vLyAgICAgfVxuLy8gfVxuLy8gbGV0IHByb2ZpbGVTZXR0aW5nX3ByaXZhY3kgPSB7XG4vLyAgICAgbmFtZTogJ3Byb2ZpbGVTZXR0aW5nX3ByaXZhY3knLFxuLy8gICAgIHVybDogJy9wcml2YWN5Jyxcbi8vICAgICBwYXJlbnQ6ICdwcm9maWxlU2V0dGluZycsXG4vLyAgICAgdmlld3M6IHtcbi8vICAgICAgICAgcmlnaHRfc2VjdGlvbjoge1xuLy8gICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvaHRtbC9wcm9maWxlU2V0dGluZ19wcml2YWN5Lmh0bWwnLFxuLy8gICAgICAgICAgICAgY29udHJvbGxlcjogJ3Byb2ZpbGVTZXR0aW5nQ3RybCdcbi8vICAgICAgICAgfVxuLy8gICAgIH1cbi8vIH1cbi8vIGxldCBwcm9maWxlU2V0dGluZ19kYW5nZXIgPSB7XG4vLyAgICAgICAgIG5hbWU6ICdwcm9maWxlU2V0dGluZ19kYW5nZXInLFxuLy8gICAgICAgICB1cmw6ICcvZGFuZ2VyJyxcbi8vICAgICAgICAgcGFyZW50OiAncHJvZmlsZVNldHRpbmcnLFxuLy8gICAgICAgICB2aWV3czoge1xuLy8gICAgICAgICAgICAgcmlnaHRfc2VjdGlvbjoge1xuLy8gICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2h0bWwvcHJvZmlsZVNldHRpbmdfZGFuZ2VyLmh0bWwnLFxuLy8gICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdwcm9maWxlU2V0dGluZ0N0cmwnXG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgIH1cbi8vICAgICB9XG4iLCIndXNlIHN0cmljdCdcblxuJChkb2N1bWVudCkucmVhZHkoaW5pdCk7XG5cbmZ1bmN0aW9uIGluaXQoKSB7XG4gICAgY29uc29sZS5sb2coJ2pxdWVyeSBsb2FkZWQnKTtcbiAgICBzdGlja3koKVxuICAgIHdpbmRvd1Njcm9sbERvd24oKVxufVxuXG5mdW5jdGlvbiBzdGlja3koKSB7XG4gICAgJChcIi5zdGlja3lcIikuc3RpY2t5KHtcbiAgICAgICAgdG9wU3BhY2luZzogNjBcbiAgICB9KVxufVxuXG5mdW5jdGlvbiB3aW5kb3dTY3JvbGxEb3duKCkge1xuICAgIHZhciBsYXN0U2Nyb2xsVG9wID0gMFxuICAgIHZhciBzdFxuICAgICQod2luZG93KS5zY3JvbGwoZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCQod2luZG93KS5zY3JvbGxUb3AoKSk7XG4gICAgICAgIHN0ID0gJCh0aGlzKS5zY3JvbGxUb3AoKTtcbiAgICAgICAgaWYgKHN0IDwgbGFzdFNjcm9sbFRvcCkge1xuICAgICAgICAgICAgJCgnLmhvbWUtcGFnZSBuYXYnKS5yZW1vdmVDbGFzcygnZm9sZGVkJylcbiAgICAgICAgICAgICQoJy5ob21lLXBhZ2UgbmF2JykuY3NzKCdib3JkZXItYm90dG9tJywgJzBweCBzb2xpZCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJCgnLmhvbWUtcGFnZSBuYXYnKS5hZGRDbGFzcygnZm9sZGVkJylcbiAgICAgICAgfVxuICAgICAgICBsYXN0U2Nyb2xsVG9wID0gc3RcblxuICAgICAgICBpZiAoJCh3aW5kb3cpLnNjcm9sbFRvcCgpIDwgMSkge1xuICAgICAgICAgICAgJCgnLmhvbWUtcGFnZSBuYXYnKS5hZGRDbGFzcygndG9wJylcbiAgICAgICAgfVxuICAgICAgICBpZiAoJCh3aW5kb3cpLnNjcm9sbFRvcCgpID4gMSkge1xuICAgICAgICAgICAgJCgnLmhvbWUtcGFnZSBuYXYnKS5yZW1vdmVDbGFzcygndG9wJylcbiAgICAgICAgfVxuICAgICAgICBpZiAoJCh3aW5kb3cpLnNjcm9sbFRvcCgpID4gMzApIHtcblxuICAgICAgICB9XG4gICAgICAgIGlmICgkKHdpbmRvdykuc2Nyb2xsVG9wKCkgPCA1NDApIHtcbiAgICAgICAgICAgICQoJy5ob21lLXBhZ2UgbmF2JykuY3NzKCdib3gtc2hhZG93JywgJ2luc2V0IDAgLTFweCAwcHggMHB4IHJnYmEoMCwwLDAsMCknKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJCh3aW5kb3cpLnNjcm9sbFRvcCgpID4gNTQwKSB7XG4gICAgICAgICAgICAkKCcuaG9tZS1wYWdlIG5hdicpLmNzcygnYm94LXNoYWRvdycsICdpbnNldCAwIC0xcHggMHB4IDBweCByZ2JhKDAsMCwwLDAuMSknKTtcbiAgICAgICAgfVxuXG4gICAgfSlcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ3BpbmNoQXBwJylcbiAgICAuc2VydmljZSgnQWNjb3VudCcsIEFjY291bnQpXG4gICAgLnNlcnZpY2UoJ1Byb2plY3QnLCBQcm9qZWN0KVxuICAgIC5mYWN0b3J5KCdmb2N1cycsIGZvY3VzKVxuXG5mdW5jdGlvbiBBY2NvdW50KCRodHRwKSB7XG4gICAgdGhpcy5nZXRDdXJyZW50VXNlciA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuICRodHRwKHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICB1cmw6ICcvYXBpL3VzZXJzL293bidcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMuZ2V0VXNlckRhdGEgPSAodXJpVXNlcklkKSA9PiB7XG4gICAgICAgIHJldHVybiAkaHR0cCh7XG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgdXJsOiBgL2FwaS91c2Vycy8ke3VyaVVzZXJJZH1gXG4gICAgICAgIH0pXG4gICAgfVxuICAgIHRoaXMudXBkYXRlVXNlckRhdGEgPSAodXJpVXNlcklkLCB1cGRhdGVVc2VyRGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gJGh0dHAoe1xuICAgICAgICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgICAgICAgIHVybDogYC9hcGkvdXNlcnMvJHt1cmlVc2VySWR9YCxcbiAgICAgICAgICAgIGRhdGE6IHVwZGF0ZVVzZXJEYXRhXG4gICAgICAgIH0pXG4gICAgfVxuICAgIHRoaXMuZm9sbG93ID0gKGN1cnJlbnRVc2VyLCBmb2xsb3dUYXJnZXQpID0+IHtcbiAgICAgICAgcmV0dXJuICRodHRwKHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BVVCcsXG4gICAgICAgICAgICB1cmw6IGAvYXBpL3VzZXJzL2V2ZW50L2ZvbGxvd2AsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgY3VycmVudFVzZXI6IGN1cnJlbnRVc2VyLFxuICAgICAgICAgICAgICAgIGZvbGxvd1RhcmdldDogZm9sbG93VGFyZ2V0XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxufVxuXG5mdW5jdGlvbiBQcm9qZWN0KCRodHRwKSB7XG4gICAgdGhpcy5jcmVhdGVPbmUgPSAobmV3UG9qZWN0T2JqKSA9PiB7XG4gICAgICAgIHJldHVybiAkaHR0cCh7XG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIHVybDogJy9hcGkvcHJvamVjdHMvJyxcbiAgICAgICAgICAgIGRhdGE6IG5ld1BvamVjdE9ialxuICAgICAgICB9KVxuICAgIH1cbiAgICB0aGlzLmdldEFsbCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuICRodHRwKHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICB1cmw6ICcvYXBpL3Byb2plY3RzL2FsbCdcbiAgICAgICAgfSlcbiAgICB9XG4gICAgdGhpcy5nZXRPbmVQb3JqZWN0ID0gKHByb2plY3RJZCkgPT4ge1xuICAgICAgICByZXR1cm4gJGh0dHAoe1xuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIHVybDogYC9hcGkvcHJvamVjdHMvJHtwcm9qZWN0SWR9YFxuICAgICAgICB9KVxuICAgIH1cbiAgICB0aGlzLmRlbGV0ZU9uZSA9IChwcm9qZWN0SWQpID0+IHtcbiAgICAgICAgcmV0dXJuICRodHRwKHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgICAgICAgICB1cmw6IGAvYXBpL3Byb2plY3RzLyR7cHJvamVjdElkfWBcbiAgICAgICAgfSlcbiAgICB9XG4gICAgdGhpcy5kZWxldGVPbmUgPSAocHJvamVjdElkKSA9PiB7XG4gICAgICAgIHJldHVybiAkaHR0cCh7XG4gICAgICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgICAgICAgdXJsOiBgL2FwaS9wcm9qZWN0cy8ke3Byb2plY3RJZH1gXG4gICAgICAgIH0pXG4gICAgfVxuICAgIHRoaXMubGlrZSA9IChwcm9qZWN0SWQsIGxpa2VySWQpID0+IHtcbiAgICAgICAgcmV0dXJuICRodHRwKHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BVVCcsXG4gICAgICAgICAgICB1cmw6IGAvYXBpL3Byb2plY3RzL2V2ZW50L2xpa2VgLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIHByb2plY3RJZDogcHJvamVjdElkLFxuICAgICAgICAgICAgICAgIGxpa2VySWQ6IGxpa2VySWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGZvY3VzKCRyb290U2NvcGUsICR0aW1lb3V0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ2ZvY3VzT24nLCBuYW1lKTtcbiAgICAgICAgfSwgMCk7XG4gICAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyXG4gICAgLm1vZHVsZSgncGluY2hBcHAnKVxuICAgIC5kaXJlY3RpdmUoJ2ZvY3VzT24nLCBmb2N1c09uKVxuXG5mdW5jdGlvbiBmb2N1c09uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbSwgYXR0cikge1xuICAgICAgICBzY29wZS4kb24oJ2ZvY3VzT24nLCBmdW5jdGlvbihlLCBuYW1lKSB7XG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gYXR0ci5mb2N1c09uKSB7XG4gICAgICAgICAgICAgICAgZWxlbVswXS5mb2N1cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyXG4gICAgLm1vZHVsZSgncGluY2hBcHAnKVxuICAgIC5kaXJlY3RpdmUoJ3Rvb2xUaXAnLCB0b29sVGlwKVxuXG5mdW5jdGlvbiB0b29sVGlwKCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KCcudG9vbC10aXAnKS5vbignY2xpY2sgbW91c2VsZWF2ZScsIGhpZGVUb29sdGlwKTtcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KCcudG9vbC10aXAnKS5vbignbW91c2VlbnRlcicsIHNob3dUb29sdGlwKTtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBoaWRlVG9vbHRpcCgpIHtcbiAgICAkKHRoaXMpLnRvb2x0aXAoJ2hpZGUnKTtcbn1cblxuZnVuY3Rpb24gc2hvd1Rvb2x0aXAoKSB7XG4gICAgJCh0aGlzKS50b29sdGlwKCdzaG93Jyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdwaW5jaEFwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ25hdkN0cmwnLCBuYXZDdHJsKVxuICAgIC5jb250cm9sbGVyKCdob21lQ3RybCcsIGhvbWVDdHJsKVxuICAgIC5jb250cm9sbGVyKCdwcGFnZUN0cmwnLCBwcGFnZUN0cmwpXG4gICAgLmNvbnRyb2xsZXIoJ3Byb2ZpbGVTZXR0aW5nQ3RybCcsIHByb2ZpbGVTZXR0aW5nQ3RybClcbiAgICAuY29udHJvbGxlcigncHJvamVjdHBhZ2VDdHJsJywgcHJvamVjdHBhZ2VDdHJsKVxuICAgIC5jb250cm9sbGVyKCdwcm9qZWN0U2V0dGluZ0N0cmwnLCBwcm9qZWN0U2V0dGluZ0N0cmwpXG5cblxuZnVuY3Rpb24gaG9tZUN0cmwoKSB7XG4gICAgY29uc29sZS5sb2coJ2hvbWVDdHJsIGxvYWRlZCcpO1xufVxuXG5mdW5jdGlvbiBwcm9qZWN0U2V0dGluZ0N0cmwoJHNjb3BlLCAkaHR0cCwgJHN0YXRlUGFyYW1zLCBQcm9qZWN0LCAkc3RhdGUsICRsb2NhdGlvbikge1xuICAgIGNvbnNvbGUubG9nKCdwcm9qZWN0U2V0dGluZ0N0cmwgbG9hZGVkJyk7XG4gICAgdmFyIGlzQXV0aG9yID0gZmFsc2U7XG4gICAgdmFyIHByb2plY3RJZCA9ICRzdGF0ZVBhcmFtcy5wcm9qZWN0SWQ7XG5cbiAgICBQcm9qZWN0LmdldE9uZVBvcmplY3QocHJvamVjdElkKS50aGVuKHJlcyA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdwcm9qZWN0czogJywgcmVzLmRhdGEpO1xuICAgICAgICAkc2NvcGUucHJvamVjdCA9IHJlcy5kYXRhO1xuICAgICAgICAkc2NvcGUudXBkYXRlUHJvamVjdERhdGEgPSAkc2NvcGUucHJvamVjdDtcbiAgICAgICAgJHNjb3BlLnByb2plY3QuYXV0aG9yLmZvckVhY2goYXV0aG9yID0+IHtcbiAgICAgICAgICAgIC8vIGluIGNhc2UsIHByb2plY3QgaGFzIG11dGlwbGUgYXV0aG9yc1xuICAgICAgICAgICAgaWYgKGF1dGhvci5faWQgPT0gJHNjb3BlLmN1cnJlbnRVc2VyLl9pZCkge1xuICAgICAgICAgICAgICAgIGlzQXV0aG9yID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgaWYgKGlzQXV0aG9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnaXNBdXRob3InKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdpcyBub3QgQXV0aG9yJyk7XG4gICAgICAgICAgICAkc3RhdGUuZ28oJ2hvbWUnKTtcbiAgICAgICAgfVxuICAgIH0sIGVyciA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdlcnIgd2hlbiBnZXQgdGhpcyBwcm9qZWN0OiAnLCBlcnIpO1xuICAgIH0pXG4gICAgJHNjb3BlLnJlcXVlc3QgPSB7XG4gICAgICAgIHBlb3BsZTogW10sXG4gICAgICAgIHN1cHBseTogW10sXG4gICAgICAgIG1vbmV5OiBbXVxuICAgIH07XG5cbiAgICAkc2NvcGUuaW5pdCA9ICgpID0+IHtcbiAgICAgICAgdmFyIGNoZWNrVXJsID0gJGxvY2F0aW9uLiQkcGF0aC5pbmNsdWRlcygnZGFuZ2VyJykgfHwgJGxvY2F0aW9uLiQkcGF0aC5pbmNsdWRlcygncmVxdWVzdCcpIHx8ICRsb2NhdGlvbi4kJHBhdGguaW5jbHVkZXMoJ3ByaXZhY3knKVxuICAgICAgICBpZiAoIWNoZWNrVXJsKSB7XG4gICAgICAgICAgICAkc3RhdGUuZ28oJ3Byb2plY3RTZXR0aW5nX2dlbmVyYWwnKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAkc2NvcGUuYWRkQ2hvaWNlVG9QZW9wbGUgPSAocGVvcGxlKSA9PiB7XG4gICAgICAgIGlmICgkc2NvcGUucmVxdWVzdC5wZW9wbGUuaW5kZXhPZihwZW9wbGUpICE9PSAtMSkge1xuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3QucGVvcGxlLnNwbGljZSgkc2NvcGUucmVxdWVzdC5wZW9wbGUuaW5kZXhPZihwZW9wbGUpLCAxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0LnBlb3BsZS5wdXNoKHBlb3BsZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coJHNjb3BlLnJlcXVlc3QucGVvcGxlKTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLmFkZENob2ljZVRvU3VwcGx5ID0gKHN1cHBseSkgPT4ge1xuICAgICAgICBpZiAoJHNjb3BlLnJlcXVlc3Quc3VwcGx5LmluZGV4T2Yoc3VwcGx5KSAhPT0gLTEpIHtcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0LnN1cHBseS5zcGxpY2UoJHNjb3BlLnJlcXVlc3Quc3VwcGx5LmluZGV4T2Yoc3VwcGx5KSwgMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdC5zdXBwbHkucHVzaChzdXBwbHkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKCRzY29wZS5yZXF1ZXN0LnN1cHBseSk7XG4gICAgfVxuICAgICRzY29wZS5hZGRDaG9pY2VUb01vbmV5ID0gKG1vbmV5KSA9PiB7XG4gICAgICAgIGlmICgkc2NvcGUucmVxdWVzdC5tb25leS5pbmRleE9mKG1vbmV5KSAhPT0gLTEpIHtcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0Lm1vbmV5LnNwbGljZSgkc2NvcGUucmVxdWVzdC5tb25leS5pbmRleE9mKG1vbmV5KSwgMSk7XG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdC5tb25leSA9IFtdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3QubW9uZXkgPSBbXTtcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0Lm1vbmV5LnB1c2gobW9uZXkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKCRzY29wZS5yZXF1ZXN0Lm1vbmV5KTtcbiAgICB9XG4gICAgJHNjb3BlLmRlbGV0ZVByb2plY3QgPSAocHJvamVjdEZ1bGxOYW1lKSA9PiB7XG4gICAgICAgIGlmICgkc2NvcGUuZGVsZXRlUHJvamVjdElucHV0ID09IHByb2plY3RGdWxsTmFtZSkge1xuICAgICAgICAgICAgbGV0IHByb2plY3RJZCA9ICRzdGF0ZVBhcmFtcy5wcm9qZWN0SWQ7XG4gICAgICAgICAgICBQcm9qZWN0LmRlbGV0ZU9uZShwcm9qZWN0SWQpLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncHJvamVjdCBkZWxldGVkJyk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JlczogJywgcmVzLmRhdGEpO1xuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygncHBhZ2UnLCB7XG4gICAgICAgICAgICAgICAgICAgIHVzZXJJZDogJHNjb3BlLmN1cnJlbnRVc2VyLl9pZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgZXJyID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygndXNlciBpcyBub3QgbG9nZ2VkIGluLicpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdubycpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgJHNjb3BlLmRhbmdlck5vdGlmaWVkID0gZmFsc2U7XG4gICAgJHNjb3BlLmRhbmdlck5vdGlmdHkgPSAoKSA9PiB7XG4gICAgICAgICRzY29wZS5kYW5nZXJOb3RpZmllZCA9ICEkc2NvcGUuZGFuZ2VyTm90aWZpZWQ7XG4gICAgfVxuICAgICRzY29wZS5zYW1lVG9UaGVQcm9qZWN0TmFtZSA9IChwcm9qZWN0RnVsbE5hbWUpID0+IHtcbiAgICAgICAgcmV0dXJuICRzY29wZS5kZWxldGVQcm9qZWN0SW5wdXQgPT0gcHJvamVjdEZ1bGxOYW1lO1xuICAgIH1cbiAgICAkc2NvcGUub2theVRvRGVsZXRlID0gKHByb2plY3RGdWxsTmFtZSkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnJHNjb3BlLmRhbmdlck5vdGlmaWVkOiAnLCAkc2NvcGUuZGFuZ2VyTm90aWZpZWQpO1xuICAgICAgICByZXR1cm4gJHNjb3BlLmRlbGV0ZVByb2plY3RJbnB1dCA9PSBwcm9qZWN0RnVsbE5hbWUgJiYgJHNjb3BlLmRhbmdlck5vdGlmaWVkO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcHJvamVjdHBhZ2VDdHJsKCRzY29wZSwgJGh0dHAsICRzdGF0ZVBhcmFtcywgUHJvamVjdCkge1xuICAgIGNvbnNvbGUubG9nKCdwcm9qZWN0cGFnZUN0cmwgbG9hZGVkJyk7XG4gICAgJHNjb3BlLnN0YXRlID0ge31cbiAgICAkc2NvcGUuc3RhdGUuaXNBdXRob3IgPSBmYWxzZVxuICAgIHZhciBwcm9qZWN0SWQgPSAkc3RhdGVQYXJhbXMucHJvamVjdElkO1xuICAgIC8vIGNvbnNvbGUubG9nKCdwcm9qZWN0SWQ6ICcsIHByb2plY3RJZCk7XG4gICAgUHJvamVjdC5nZXRPbmVQb3JqZWN0KHByb2plY3RJZCkudGhlbihyZXMgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygncHJvamVjdERhdGE6ICcsIHJlcy5kYXRhKTtcbiAgICAgICAgJHNjb3BlLnByb2plY3QgPSByZXMuZGF0YVxuICAgICAgICBjb25zb2xlLmxvZygnJHNjb3BlLmN1cnJlbnRVc2VyLl9pZDogJywgJHNjb3BlLmN1cnJlbnRVc2VyLl9pZClcbiAgICAgICAgY29uc29sZS5sb2coJyRzY29wZS5wcm9qZWN0LmF1dGhvcjogJywgJHNjb3BlLnByb2plY3QuYXV0aG9yKVxuICAgICAgICB2YXIgYXV0aG9ycyA9IHJlcy5kYXRhLmF1dGhvclxuICAgICAgICBmb3IgKHZhciBhdXRob3IgaW4gYXV0aG9ycykge1xuICAgICAgICAgICAgaWYgKCRzY29wZS5jdXJyZW50VXNlci5faWQgPT0gYXV0aG9yc1thdXRob3JdLl9pZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAkc2NvcGUuc3RhdGUuaXNBdXRob3IgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgZXJyID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ2VyciB3aGVuIGdldCB0aGlzIHByb2plY3Q6ICcsIGVycik7XG4gICAgfSlcbiAgICAkc2NvcGUubGlrZSA9IChsaWtlcklkLCBwcm9qZWN0SWQpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2cobGlrZXJJZCwgJ2NsaWNrcyBsaWtlQnRuIG9mJywgcHJvamVjdElkKTtcbiAgICAgICAgaWYgKCRzY29wZS5zdGF0ZS5pc0F1dGhvcikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2xpa2VFdmVudCB0cmlnZ2VyZWQnKVxuICAgICAgICAgICAgUHJvamVjdC5saWtlKHByb2plY3RJZCwgbGlrZXJJZCkudGhlbihyZXMgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JlczogJywgcmVzKTtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIGlmIChyZXMuZGF0YS5ldmVudFR5cGUgPT0gJ2ZvbGxvdycpIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICBjb25zb2xlLmxvZygnY2hlY2snKTtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICBjb25zb2xlLmxvZygnZm9sbHdpbmc6IHJlcywgJywgcmVzLmRhdGEpXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgdmFyIGZvbGxvd2VyID0gcmVzLmRhdGEuZm9sbG93ZXJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICB2YXIgZm9sbG93aW5nUmVjZWl2ZXIgPSByZXMuZGF0YS5mb2xsb3dpbmdSZWNlaXZlclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICRzY29wZS51c2VyLmZvbGxvd2Vyc0xpc3QucHVzaChmb2xsb3dlcilcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICBjaGVja0ZvbGxvd1N0YXR1cygpXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICB9IGVsc2UgaWYgKHJlcy5kYXRhLmV2ZW50VHlwZSA9PSAndW5mb2xsb3cnKSB7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgY29uc29sZS5sb2coJ2NoZWNrJyk7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgY29uc29sZS5sb2coJ3VuZm9sbHdpbmc6IHJlcywgJywgcmVzLmRhdGEpXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgdmFyIHVuZm9sbG93ZXIgPSByZXMuZGF0YS51bmZvbGxvd2VyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgdmFyIHVuZm9sbG93aW5nUmVjZWl2ZXIgPSByZXMuZGF0YS51bmZvbGxvd2luZ1JlY2VpdmVyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgdmFyIGluZGV4ID0gJHNjb3BlLnVzZXIuZm9sbG93ZXJzTGlzdC5pbmRleE9mKGZvbGxvd2VyKVxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICRzY29wZS51c2VyLmZvbGxvd2Vyc0xpc3Quc3BsaWNlKGluZGV4LCAxKVxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIGNoZWNrRm9sbG93U3RhdHVzKClcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGVyciA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2VyciB3aGVuIGxpa2UvdW5saWtlOiAnLCBlcnIpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBwcm9maWxlU2V0dGluZ0N0cmwoJHNjb3BlLCAkaHR0cCwgJHN0YXRlUGFyYW1zLCBBY2NvdW50LCAkc3RhdGUsICR3aW5kb3csIFVwbG9hZCwgJGxvY2F0aW9uKSB7XG4gICAgY29uc29sZS5sb2coJ3Byb2ZpbGVTZXR0aW5nQ3RybCBsb2FkZWQnKTtcblxuICAgIGlmICgkc3RhdGVQYXJhbXMudXNlcklkID09ICRzY29wZS5jdXJyZW50VXNlci5faWQpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2lzQXV0aFVzZXInKTtcbiAgICAgICAgJHNjb3BlLnVwZGF0ZVVzZXJEYXRhID0gYW5ndWxhci5jb3B5KCRzY29wZS5jdXJyZW50VXNlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2lzIG5vdCBBdXRoVXNlcicpO1xuICAgICAgICAkc3RhdGUuZ28oJ2hvbWUnKTtcbiAgICB9XG4gICAgJHNjb3BlLmluaXQgPSAoKSA9PiB7XG4gICAgICAgIHZhciBjaGVja1VybCA9ICRsb2NhdGlvbi4kJHBhdGguaW5jbHVkZXMoJ2RhbmdlcicpIHx8ICRsb2NhdGlvbi4kJHBhdGguaW5jbHVkZXMoJ3JlcXVlc3QnKSB8fCAkbG9jYXRpb24uJCRwYXRoLmluY2x1ZGVzKCdwcml2YWN5JylcbiAgICAgICAgaWYgKCFjaGVja1VybCkge1xuICAgICAgICAgICAgJHN0YXRlLmdvKCdwcm9maWxlU2V0dGluZ19nZW5lcmFsJyk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgJHNjb3BlLnVwZGF0ZVVzZXJEYXRhU3VibWl0dGVkID0gKCkgPT4ge1xuICAgICAgICB2YXIgdXJpVXNlcklkID0gJHNjb3BlLnVwZGF0ZVVzZXJEYXRhLl9pZDtcbiAgICAgICAgdmFyIHVwZGF0ZVVzZXJEYXRhID0gJHNjb3BlLnVwZGF0ZVVzZXJEYXRhO1xuICAgICAgICBBY2NvdW50LnVwZGF0ZVVzZXJEYXRhKHVyaVVzZXJJZCwgdXBkYXRlVXNlckRhdGEpLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICAgICRzY29wZS51cGRhdGVVc2VyRGF0YSA9IHJlcy5kYXRhO1xuICAgICAgICAgICAgJHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgfSwgZXJyID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnIgd2hlbiBnZXQgdXBkYXRlIHVzZXIgZGF0YTogJywgZXJyKTtcbiAgICAgICAgfSlcbiAgICB9XG4gICAgJHNjb3BlLnBob3RvVXBsb2FkaW5nID0gZmFsc2VcbiAgICAkc2NvcGUudXBsb2FkRmlsZXMgPSAoZmlsZSkgPT4ge1xuICAgICAgICAkc2NvcGUucGhvdG9VcGxvYWRpbmcgPSB0cnVlO1xuICAgICAgICB2YXIgZmlsZSA9IGZpbGVbMF1cbiAgICAgICAgdmFyIHVzZXJJZCA9ICRzY29wZS5jdXJyZW50VXNlci5faWQ7XG4gICAgICAgIGNvbnNvbGUubG9nKCdwaG90bzogJywgZmlsZSk7XG4gICAgICAgIGlmIChmaWxlKSB7XG4gICAgICAgICAgICBVcGxvYWQudXBsb2FkKHtcbiAgICAgICAgICAgICAgICB1cmw6IGAvYXBpL3VwbG9hZC8ke3VzZXJJZH1gLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgbmV3RmlsZTogZmlsZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncmVzIGFmdGVyIHVwbG9hZDogJywgcmVzLmRhdGEpO1xuICAgICAgICAgICAgICAgICR3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgICB9LCBlcnIgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnIgd2hlbiB1cGxvYWQgZmlsZTogJywgZXJyKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbn1cblxuZnVuY3Rpb24gcHBhZ2VDdHJsKCRzY29wZSwgJHN0YXRlLCAkcm9vdFNjb3BlLCAkc3RhdGVQYXJhbXMsIFByb2plY3QsIEFjY291bnQsICR0aW1lb3V0LCAkbG9jYXRpb24pIHtcbiAgICBjb25zb2xlLmxvZygncHBhZ2VDdHJsIGxvYWRlZCcpXG4gICAgJHNjb3BlLnN0YXRlID0ge31cbiAgICAkc2NvcGUuc3RhdGUuaXNUaGVVc2VyID0gZmFsc2VcbiAgICAkc2NvcGUuc3RhdGUuZm9sbG93U3RhdHVzID0gZmFsc2VcbiAgICB2YXIgZGlzcGxheVVzZXI7XG4gICAgdmFyIHVyaVVzZXJJZCA9ICRzdGF0ZVBhcmFtcy51c2VySWQ7XG4gICAgaWYgKHVyaVVzZXJJZCA9PSAkc2NvcGUuY3VycmVudFVzZXIuX2lkKSB7XG4gICAgICAgICRzY29wZS5zdGF0ZS5pc1RoZVVzZXIgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoJHNjb3BlLnN0YXRlLmlzVGhlVXNlcikge1xuICAgICAgICBjb25zb2xlLmxvZygnaXNUaGVVc2VyJylcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZygnaXMgbm90IFRoZVVzZXInKVxuICAgIH1cbiAgICAkc2NvcGUuaW5pdCA9ICgpID0+IHtcbiAgICAgICAgY2hlY2tpbmdVcmwoKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNoZWNraW5nVXJsKCkge1xuICAgICAgICB2YXIgY2hlY2tVcmwgPSAkbG9jYXRpb24uJCRwYXRoLmluY2x1ZGVzKCdzdGFycmVkJykgfHwgJGxvY2F0aW9uLiQkcGF0aC5pbmNsdWRlcygnZm9sbG93ZXJzJylcbiAgICAgICAgaWYgKCFjaGVja1VybCkge1xuICAgICAgICAgICAgJHN0YXRlLmdvKCdwcGFnZV9wcm9qZWN0cycpO1xuICAgICAgICB9XG4gICAgfVxuICAgIEFjY291bnQuZ2V0VXNlckRhdGEodXJpVXNlcklkKS50aGVuKHJlcyA9PiB7XG4gICAgICAgICRzY29wZS51c2VyID0gcmVzLmRhdGFcbiAgICAgICAgZGlzcGxheVVzZXIgPSByZXMuZGF0YVxuICAgICAgICAkc2NvcGUucHJvamVjdHMgPSByZXMuZGF0YS5wcm9qZWN0cy5yZXZlcnNlKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdjYXJkcyBoZXJlOiAnLCByZXMuZGF0YS5wcm9qZWN0cyk7XG4gICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY2hlY2tGb2xsb3dTdGF0dXMoKVxuICAgICAgICB9LCAwKVxuICAgIH0sIGVyciA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdlcnIgd2hlbiBnZXQgdXNlckRhdGE6ICcsIGVycik7XG4gICAgfSlcblxuICAgICRzY29wZS5jcmVhdGVUaW1lID0gKGNyZWF0ZUF0VGltZSkgPT4ge1xuICAgICAgICByZXR1cm4gbW9tZW50KGNyZWF0ZUF0VGltZSkuZnJvbU5vdygpO1xuICAgIH1cblxuICAgICRzY29wZS5mb2xsb3cgPSAoY3VycmVudFVzZXIsIGZvbGxvd1RhcmdldCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnZmZmZmZmJyk7XG4gICAgICAgIGNvbnNvbGUubG9nKGN1cnJlbnRVc2VyLCBmb2xsb3dUYXJnZXQpO1xuICAgICAgICBpZiAoY3VycmVudFVzZXIgIT09IGZvbGxvd1RhcmdldCAmJiBmb2xsb3dUYXJnZXQgPT0gdXJpVXNlcklkKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZm9sbG93RXZlbnQgdHJpZ2dlcmVkJylcbiAgICAgICAgICAgIEFjY291bnQuZm9sbG93KGN1cnJlbnRVc2VyLCBmb2xsb3dUYXJnZXQpLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncmVzOiAnLCByZXMpO1xuICAgICAgICAgICAgICAgIGlmIChyZXMuZGF0YS5ldmVudFR5cGUgPT0gJ2ZvbGxvdycpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2NoZWNrJyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdmb2xsd2luZzogcmVzLCAnLCByZXMuZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZvbGxvd2VyID0gcmVzLmRhdGEuZm9sbG93ZXJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZvbGxvd2luZ1JlY2VpdmVyID0gcmVzLmRhdGEuZm9sbG93aW5nUmVjZWl2ZXJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVzZXIuZm9sbG93ZXJzTGlzdC5wdXNoKGZvbGxvd2VyKVxuICAgICAgICAgICAgICAgICAgICBjaGVja0ZvbGxvd1N0YXR1cygpXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXMuZGF0YS5ldmVudFR5cGUgPT0gJ3VuZm9sbG93Jykge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnY2hlY2snKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3VuZm9sbHdpbmc6IHJlcywgJywgcmVzLmRhdGEpXG4gICAgICAgICAgICAgICAgICAgIHZhciB1bmZvbGxvd2VyID0gcmVzLmRhdGEudW5mb2xsb3dlclxuICAgICAgICAgICAgICAgICAgICB2YXIgdW5mb2xsb3dpbmdSZWNlaXZlciA9IHJlcy5kYXRhLnVuZm9sbG93aW5nUmVjZWl2ZXJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gJHNjb3BlLnVzZXIuZm9sbG93ZXJzTGlzdC5pbmRleE9mKGZvbGxvd2VyKVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudXNlci5mb2xsb3dlcnNMaXN0LnNwbGljZShpbmRleCwgMSlcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tGb2xsb3dTdGF0dXMoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGVyciA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2VyciB3aGVuIGZvbGxvdy91bmZvbGxvdzogJywgZXJyKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgY2hlY2tGb2xsb3dTdGF0dXMgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnY2hlY2tGb2xsb3dTdGF0dXMgdHJpZ2VycmVkJyk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZGlzcGxheVVzZXI6ICcsIGRpc3BsYXlVc2VyKTtcbiAgICAgICAgICAgIGlmIChkaXNwbGF5VXNlci5mb2xsb3dlcnNMaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgZm9sbG93ZXJzTGlzdCA9IGRpc3BsYXlVc2VyLmZvbGxvd2Vyc0xpc3RcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnY2hlY2tlZCcpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGZvbGxvd2VyIGluIGZvbGxvd2Vyc0xpc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2N1cnJlbnRVc2VyOiAnLCAkc2NvcGUuY3VycmVudFVzZXIuX2lkKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2ZvbGxvd2Vyc0xpc3RbZm9sbG93ZXJdLl9pZDogJywgZm9sbG93ZXJzTGlzdFtmb2xsb3dlcl0uX2lkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvbGxvd2Vyc0xpc3RbZm9sbG93ZXJdLl9pZCA9PSAkc2NvcGUuY3VycmVudFVzZXIuX2lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdGUuZm9sbG93U3RhdHVzID0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YXRlLmZvbGxvd1N0YXR1cyA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICRzY29wZS5zdGF0ZS5mb2xsb3dTdGF0dXMgPSBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGNoZWNrRm9sbG93U3RhdHVzKClcbn1cblxuZnVuY3Rpb24gbmF2Q3RybCgkaHR0cCwgJHNjb3BlLCAkYXV0aCwgQWNjb3VudCwgJHJvb3RTY29wZSwgJHRpbWVvdXQsICR3aW5kb3csICRzdGF0ZSwgZm9jdXMsIFByb2plY3QsICRsb2NhdGlvbikge1xuICAgIC8vIGNvbnNvbGUubG9nKCduYXZDdHJsIGxvYWRlZCcpO1xuICAgICRzY29wZS5jdXJyZW50VXNlciA9ICcnO1xuICAgICRzY29wZS5sb2dpbmxvYWRpbmcgPSBmYWxzZTtcbiAgICAkc2NvcGUubG9nb3V0bG9hZGluZyA9IGZhbHNlO1xuICAgICRyb290U2NvcGUuaGlkZU5hdiA9IGZhbHNlO1xuICAgICRyb290U2NvcGUuY3JlYXRlTW9kYWwgPSBmYWxzZTtcblxuICAgICRzY29wZS5hdXRoZW50aWNhdGUgPSAocHJvdmlkZXIpID0+IHtcbiAgICAgICAgICAgICRzY29wZS5sb2dpbmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgJGF1dGguYXV0aGVudGljYXRlKHByb3ZpZGVyKS50aGVuKGRhdGEgPT4ge1xuICAgICAgICAgICAgICAgIEFjY291bnQuZ2V0Q3VycmVudFVzZXIoKS50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd1c2VyIGxvZ2dlZCBpbjogJywgcmVzLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY3VycmVudFVzZXIgPSByZXMuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxvZ2lubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnJHNjb3BlLmN1cnJlbnRVc2VyLl9pZDogJywgJHNjb3BlLmN1cnJlbnRVc2VyLl9pZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkc3RhdGUuY3VycmVudC5uYW1lID09ICdob21lJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdwcGFnZScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VySWQ6ICRzY29wZS5jdXJyZW50VXNlci5faWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd1c2VyIGlzIG5vdCBsb2dnZWQgaW4uJyk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0sIGVyciA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2VyciB3aGVuIGxvZyB1c2VyIGluOiAnLCBlcnIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICAvLyBjb25zb2xlLmxvZygnJGF1dGguaXNBdXRoZW50aWNhdGVkKCkpOiAnLCAkYXV0aC5pc0F1dGhlbnRpY2F0ZWQoKSkpO1xuICAgIGlmICgkYXV0aC5pc0F1dGhlbnRpY2F0ZWQoKSkge1xuICAgICAgICBBY2NvdW50LmdldEN1cnJlbnRVc2VyKCkudGhlbihyZXMgPT4ge1xuICAgICAgICAgICAgJHNjb3BlLmN1cnJlbnRVc2VyID0gcmVzLmRhdGE7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnbmF2Q3RybCB0cmlnZ2VyZWQgYW5kIGN1cnJlbnRVc2VyOiAnLCAkc2NvcGUuY3VycmVudFVzZXIpO1xuICAgICAgICB9LCBlcnIgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3VzZXIgaXMgbm90IGxvZ2dlZCBpbi4nKTtcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAkc2NvcGUuaXNBdXRoZW50aWNhdGVkID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gJGF1dGguaXNBdXRoZW50aWNhdGVkKCk7XG4gICAgfVxuXG4gICAgJHNjb3BlLmxvZ291dCA9ICgpID0+IHtcbiAgICAgICAgJHNjb3BlLmxvZ291dGxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAkYXV0aC5sb2dvdXQoKTtcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkc2NvcGUubG9nb3V0bG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgLy8gJHN0YXRlLmdvKCdob21lJyk7XG4gICAgICAgICAgICAkd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICB9LCAwKVxuICAgIH1cblxuICAgICRzY29wZS5nb3BwYWdlID0gKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnJGxvY2F0aW9uLiQkcGF0aDogJywgJGxvY2F0aW9uLiQkcGF0aCk7XG4gICAgICAgIGlmICgkbG9jYXRpb24uJCRwYXRoLmluY2x1ZGVzKCdwcm9qZWN0cycpKSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnc3RheSBvbiB0aGUgcGFnZSwgb3IgcmVmcmVzaCB0aGUgcGFnZScpXG4gICAgICAgICAgICAkd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkc3RhdGUuZ28oJ3BwYWdlJywge1xuICAgICAgICAgICAgICAgIHVzZXJJZDogJHNjb3BlLmN1cnJlbnRVc2VyLl9pZFxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgICRzY29wZS5jcmVhdGUgPSAoKSA9PiB7XG4gICAgICAgICRzY29wZS5wcm9qZWN0SW5pdGFsaXppbmcgPSBmYWxzZTtcbiAgICAgICAgJHNjb3BlLm5ld1Byb2plY3ROYW1lID0gJyc7XG4gICAgICAgICRzY29wZS5uZXdQcm9qZWN0UGl0Y2ggPSAnJztcbiAgICAgICAgJHNjb3BlLmNyZWF0ZU1vZGFsID0gdHJ1ZTtcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBmb2N1cygnZm9jdXNNZScpO1xuICAgICAgICB9LCAxMDApXG4gICAgfVxuICAgICRzY29wZS5jcmVhdGVQcm9qZWN0ID0gKCkgPT4ge1xuICAgICAgICAkc2NvcGUucHJvamVjdEluaXRhbGl6aW5nID0gdHJ1ZTtcbiAgICAgICAgY29uc29sZS5sb2coJ2NyZWF0ZSBwcm9qZWN0IGNhbGxlZDogJywgJHNjb3BlLm5ld1Byb2plY3ROYW1lKTtcbiAgICAgICAgdmFyIG5ld1BvamVjdE9iaiA9IHtcbiAgICAgICAgICAgIHRpdGxlOiAkc2NvcGUubmV3UHJvamVjdE5hbWUsXG4gICAgICAgICAgICBwaXRjaDogJHNjb3BlLm5ld1Byb2plY3RQaXRjaFxuICAgICAgICB9XG4gICAgICAgIFByb2plY3QuY3JlYXRlT25lKG5ld1BvamVjdE9iaikudGhlbihyZXMgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2FkZCBuZXcgYmVoYXZpb3JbY3JlYXRlTmV3UHJvamVjdF06ICcsIHJlcy5kYXRhKTtcbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5wcm9qZWN0SW5pdGFsaXppbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuY3JlYXRlTW9kYWwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoJHN0YXRlLmN1cnJlbnQubmFtZSA9PSAncHBhZ2UnKSB7XG4gICAgICAgICAgICAgICAgICAgICR3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdwcGFnZScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJJZDogJHNjb3BlLmN1cnJlbnRVc2VyLl9pZFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBNYXRoLnJhbmRvbSgpICogMTUwMCArIDMwMCk7XG4gICAgICAgIH0sIGVyciA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZXJyIHdoZW4gY3JlYXRlIHByb2plY3Q6ICcsIGVycik7XG4gICAgICAgIH0pXG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
