"use strict";function init(){console.log("jquery loaded"),sticky(),windowScrollDown()}function sticky(){$(".sticky").sticky({topSpacing:60})}function windowScrollDown(){var o,t=0;$(window).scroll(function(){o=$(this).scrollTop(),t>o?($(".home-page nav").removeClass("folded"),$(".home-page nav").css("border-bottom","0px solid")):$(".home-page nav").addClass("folded"),t=o,$(window).scrollTop()<1&&$(".home-page nav").addClass("top"),$(window).scrollTop()>1&&$(".home-page nav").removeClass("top"),$(window).scrollTop()>30,$(window).scrollTop()<540&&$(".home-page nav").css("box-shadow","inset 0 -1px 0px 0px rgba(0,0,0,0)"),$(window).scrollTop()>540&&$(".home-page nav").css("box-shadow","inset 0 -1px 0px 0px rgba(0,0,0,0.1)")})}function Account(o){this.getCurrentUser=function(){return o({method:"GET",url:"/api/auth/currentUser"})},this.sendVerifyCode=function(t){return o({method:"POST",url:"/api/verify/phone",data:t})},this.verifyCode=function(t){return o({method:"PUT",url:"/api/verify/phone",data:t})},this.getUserData=function(t){return o({method:"GET",url:"/api/users/"+t})},this.updateUserData=function(t,e){return o({method:"PUT",url:"/api/users/"+t,data:e})}}function Payment(o){this.chargeNow=function(t){return o({method:"POST",url:"/api/payment/chargeNow",data:t})}}function focus(o,t){return function(e){t(function(){o.$broadcast("focusOn",e)},0)}}function homeCtrl(){console.log("homeCtrl loaded")}function authCtrl(o,t,e,n){function r(){t.getToken()&&n.getCurrentUser(t.getToken()).then(function(t){console.log("res @getCurrentUser: ",t.data),o.currentUser=t.data},function(o){e.go("authEntrance")})}console.log("authCtrl loaded"),o.getCurrentUser=function(){r()},o.auth_enter=function(o){console.log("authData: ",o),t.signup(o).then(function(o){t.setToken(o),e.go("dashboard"),console.log("res @auth_enter: ",o.data),r()},function(o){console.log("err @auth_enter: ",o)})},o.authenticate=function(o){t.authenticate(o)},o.logout=function(){t.logout(),e.go("authEntrance")}}function dashboardCtrl(o,t,e,n,r,a){console.log("dashboardCtrl loaded"),n.getCurrentUser(t.getToken()).then(function(o){r.currentUser||(r.currentUser=o.data),console.log("res @getCurrentUser: ",o.data)},function(o){e.go("home")}),o.sendVerifyCode=function(t){if(console.log("phone: ",t),t.length>5){var e={userData:o.currentUser,phone:t};n.sendVerifyCode(e).then(function(o){console.log("res @sendVerifyCode: ",o.data)},function(o){console.log("err @sendVerifyCode: ",o)})}},o.verifyCode=function(t){if(console.log("code: ",t),0!==t.length){var e={userData:o.currentUser,code:t};n.verifyCode(e).then(function(o){console.log("res @verifyCode: ",o.data)},function(o){console.log("err @verifyCode: ",o)})}},o.doCheckout=function(t){console.log("fff"),console.log("token: ",t);var e={stripeToken:t,userData:o.currentUser};a.chargeNow(e).then(function(o){console.log("res: ",o.data)},function(o){console.log("err: ",o)})}}function focusOn(){return function(o,t,e){o.$on("focusOn",function(o,n){n===e.focusOn&&t[0].focus()})}}function toolTip(){return function(o,t,e){angular.element(".tool-tip").on("click mouseleave",hideTooltip),angular.element(".tool-tip").on("mouseenter",showTooltip)}}function hideTooltip(){$(this).tooltip("hide")}function showTooltip(){$(this).tooltip("show")}angular.module("pinchApp",["ui.router","satellizer","ngFileUpload","ngImgCrop","stripe.checkout","angular-loading-bar"]).config(["$stateProvider","$urlRouterProvider","$authProvider",function(o,t,e){Stripe.setPublishableKey("pk_test_t1eThhOKl6esrp6f4jyWqU4J"),o.state(home).state(authEntrance).state(dashboard).state(dashboard_payment).state(dashboard_plan).state(dashboard_account),t.otherwise("/")}]);var home={name:"home",url:"/",views:{main:{templateUrl:"/html/home.html",controller:"homeCtrl"}}},authEntrance={name:"authEntrance",url:"/entrance",views:{main:{templateUrl:"/html/entrance.html",controller:"authCtrl"}}},dashboard={name:"dashboard",url:"/dashboard",views:{main:{templateUrl:"/html/dashboard.html",controller:"dashboardCtrl"}}},dashboard_payment={name:"dashboard_payment",url:"/payment",parent:"dashboard",views:{dashboard_section:{templateUrl:"/html/dashboard_payment.html",controller:"dashboardCtrl"}}},dashboard_plan={name:"dashboard_plan",url:"/plan",parent:"dashboard",views:{dashboard_section:{templateUrl:"/html/dashboard_plan.html",controller:"dashboardCtrl"}}},dashboard_account={name:"dashboard_account",url:"/account",parent:"dashboard",views:{dashboard_section:{templateUrl:"/html/dashboard_account.html",controller:"dashboardCtrl"}}};$(document).ready(init),Account.$inject=["$http"],Payment.$inject=["$http"],focus.$inject=["$rootScope","$timeout"],angular.module("pinchApp").service("Account",Account).service("Payment",Payment).factory("focus",focus),authCtrl.$inject=["$scope","$auth","$state","Account"],dashboardCtrl.$inject=["$scope","$auth","$state","Account","$rootScope","Payment"],angular.module("pinchApp").controller("homeCtrl",homeCtrl).controller("authCtrl",authCtrl).controller("dashboardCtrl",dashboardCtrl),angular.module("pinchApp").directive("focusOn",focusOn),angular.module("pinchApp").directive("toolTip",toolTip);
//# sourceMappingURL=data:application/json;base64,
