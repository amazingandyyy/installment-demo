"use strict";function init(){console.log("jquery loaded"),sticky(),windowScrollDown()}function sticky(){$(".sticky").sticky({topSpacing:60})}function windowScrollDown(){var t,o=0;$(window).scroll(function(){t=$(this).scrollTop(),o>t?($(".home-page nav").removeClass("folded"),$(".home-page nav").css("border-bottom","0px solid")):$(".home-page nav").addClass("folded"),o=t,$(window).scrollTop()<1&&$(".home-page nav").addClass("top"),$(window).scrollTop()>1&&$(".home-page nav").removeClass("top"),$(window).scrollTop()>30,$(window).scrollTop()<540&&$(".home-page nav").css("box-shadow","inset 0 -1px 0px 0px rgba(0,0,0,0)"),$(window).scrollTop()>540&&$(".home-page nav").css("box-shadow","inset 0 -1px 0px 0px rgba(0,0,0,0.1)")})}function Account(t){this.getCurrentUser=function(){return t({method:"GET",url:"/api/auth/currentUser"})},this.getUserData=function(o){return t({method:"GET",url:"/api/users/"+o})},this.updateUserData=function(o,e){return t({method:"PUT",url:"/api/users/"+o,data:e})},this.follow=function(o,e){return t({method:"PUT",url:"/api/users/event/follow",data:{currentUser:o,followTarget:e}})}}function Project(t){this.createOne=function(o){return t({method:"POST",url:"/api/projects/",data:o})},this.getAll=function(){return t({method:"GET",url:"/api/projects/all"})},this.getOnePorject=function(o){return t({method:"GET",url:"/api/projects/"+o})},this.deleteOne=function(o){return t({method:"DELETE",url:"/api/projects/"+o})},this.deleteOne=function(o){return t({method:"DELETE",url:"/api/projects/"+o})},this.like=function(o,e){return t({method:"PUT",url:"/api/projects/event/like",data:{projectId:o,likerId:e}})}}function focus(t,o){return function(e){o(function(){t.$broadcast("focusOn",e)},0)}}function homeCtrl(){console.log("homeCtrl loaded")}function authCtrl(t,o,e,n){function r(){o.getToken()&&n.getCurrentUser(o.getToken()).then(function(o){console.log("res @getCurrentUser: ",o.data),t.currentUser=o.data},function(t){e.go("authEntrance")})}console.log("authCtrl loaded"),t.getCurrentUser=function(){r()},t.auth_enter=function(t){console.log("authData: ",t),o.signup(t).then(function(t){o.setToken(t),e.go("dashboard"),console.log("res @auth_enter: ",t.data),r()},function(t){console.log("err @auth_enter: ",t)})},t.authenticate=function(t){o.authenticate(t)},t.logout=function(){o.logout(),e.go("authEntrance")}}function dashboardCtrl(t,o,e,n,r){console.log("dashboardCtrl loaded"),n.getCurrentUser(o.getToken()).then(function(t){r.currentUser||(r.currentUser=t.data),console.log("res @getCurrentUser: ",t.data)},function(t){e.go("home")}),t.verifyPhone=function(t){console.log("phone: ",t)}}function focusOn(){return function(t,o,e){t.$on("focusOn",function(t,n){n===e.focusOn&&o[0].focus()})}}function toolTip(){return function(t,o,e){angular.element(".tool-tip").on("click mouseleave",hideTooltip),angular.element(".tool-tip").on("mouseenter",showTooltip)}}function hideTooltip(){$(this).tooltip("hide")}function showTooltip(){$(this).tooltip("show")}angular.module("pinchApp",["ui.router","satellizer","ngFileUpload","ngImgCrop"]).config(["$stateProvider","$urlRouterProvider","$authProvider",function(t,o,e){e.facebook({clientId:"298165113849366"}),t.state(home).state(authEntrance).state(dashboard),o.otherwise("/")}]);var home={name:"home",url:"/",views:{main:{templateUrl:"/html/home.html",controller:"homeCtrl"}}},authEntrance={name:"authEntrance",url:"/entrance",views:{main:{templateUrl:"/html/entrance.html",controller:"authCtrl"}}},dashboard={name:"dashboard",url:"/dashboard",views:{main:{templateUrl:"/html/dashboard.html",controller:"dashboardCtrl"}}};$(document).ready(init),Account.$inject=["$http"],Project.$inject=["$http"],focus.$inject=["$rootScope","$timeout"],angular.module("pinchApp").service("Account",Account).service("Project",Project).factory("focus",focus),authCtrl.$inject=["$scope","$auth","$state","Account"],dashboardCtrl.$inject=["$scope","$auth","$state","Account","$rootScope"],angular.module("pinchApp").controller("homeCtrl",homeCtrl).controller("authCtrl",authCtrl).controller("dashboardCtrl",dashboardCtrl),angular.module("pinchApp").directive("focusOn",focusOn),angular.module("pinchApp").directive("toolTip",toolTip);
//# sourceMappingURL=data:application/json;base64,
