"use strict";function init(){sticky(),windowScrollDown()}function sticky(){$(".sticky").sticky({topSpacing:60})}function windowScrollDown(){var e,o=0;$(window).scroll(function(){console.log($(window).scrollTop()),e=$(this).scrollTop(),o>e?($(".home-page nav").removeClass("folded"),$(".home-page nav").css("border-bottom","0px solid")):$(".home-page nav").addClass("folded"),o=e,$(window).scrollTop()<1&&$(".home-page nav").addClass("top"),$(window).scrollTop()>1&&$(".home-page nav").removeClass("top"),$(window).scrollTop()>30,$(window).scrollTop()<540&&$(".home-page nav").css("box-shadow","inset 0 -1px 0px 0px rgba(0,0,0,0)"),$(window).scrollTop()>540&&$(".home-page nav").css("box-shadow","inset 0 -1px 0px 0px rgba(0,0,0,0.1)")})}function Account(e){this.getCurrentUser=function(){return e({method:"GET",url:"/api/users/own"})},this.getUserData=function(o){return e({method:"GET",url:"/api/users/"+o})},this.updateUserData=function(o,t){return e({method:"PUT",url:"/api/users/"+o,data:t})},this.follow=function(o,t){return e({method:"PUT",url:"/api/users/event/follow",data:{currentUser:o,followTarget:t}})}}function Project(e){this.createOne=function(o){return e({method:"POST",url:"/api/projects/",data:o})},this.getAll=function(){return e({method:"GET",url:"/api/projects/all"})},this.getOnePorject=function(o){return e({method:"GET",url:"/api/projects/"+o})},this.deleteOne=function(o){return e({method:"DELETE",url:"/api/projects/"+o})},this.deleteOne=function(o){return e({method:"DELETE",url:"/api/projects/"+o})},this.like=function(o,t){return e({method:"PUT",url:"/api/projects/event/like",data:{projectId:o,likerId:t}})}}function focus(e,o){return function(t){o(function(){e.$broadcast("focusOn",t)},0)}}function homeCtrl(){console.log("homeCtrl loaded")}function projectSettingCtrl(e,o,t,n,r,l){console.log("projectSettingCtrl loaded");var c=!1,i=t.projectId;n.getOnePorject(i).then(function(o){console.log("projects: ",o.data),e.project=o.data,e.updateProjectData=e.project,e.project.author.forEach(function(o){o._id==e.currentUser._id&&(c=!0)}),c?console.log("isAuthor"):(console.log("is not Author"),r.go("home"))},function(e){console.log("err when get this project: ",e)}),e.request={people:[],supply:[],money:[]},e.init=function(){var e=l.$$path.includes("danger")||l.$$path.includes("request")||l.$$path.includes("privacy");e||r.go("projectSetting_general")},e.addChoiceToPeople=function(o){-1!==e.request.people.indexOf(o)?e.request.people.splice(e.request.people.indexOf(o),1):e.request.people.push(o),console.log(e.request.people)},e.addChoiceToSupply=function(o){-1!==e.request.supply.indexOf(o)?e.request.supply.splice(e.request.supply.indexOf(o),1):e.request.supply.push(o),console.log(e.request.supply)},e.addChoiceToMoney=function(o){-1!==e.request.money.indexOf(o)?(e.request.money.splice(e.request.money.indexOf(o),1),e.request.money=[]):(e.request.money=[],e.request.money.push(o)),console.log(e.request.money)},e.deleteProject=function(o){if(e.deleteProjectInput==o){var l=t.projectId;n.deleteOne(l).then(function(o){console.log("project deleted"),console.log("res: ",o.data),r.go("ppage",{userId:e.currentUser._id})},function(e){console.log("user is not logged in.")})}else console.log("no")},e.dangerNotified=!1,e.dangerNotifty=function(){e.dangerNotified=!e.dangerNotified},e.sameToTheProjectName=function(o){return e.deleteProjectInput==o},e.okayToDelete=function(o){return console.log("$scope.dangerNotified: ",e.dangerNotified),e.deleteProjectInput==o&&e.dangerNotified}}function projectpageCtrl(e,o,t,n){console.log("projectpageCtrl loaded"),e.state={},e.state.isAuthor=!1;var r=t.projectId;n.getOnePorject(r).then(function(o){console.log("projectData: ",o.data),e.project=o.data,console.log("$scope.currentUser._id: ",e.currentUser._id),console.log("$scope.project.author: ",e.project.author);var t=o.data.author;for(var n in t)if(e.currentUser._id==t[n]._id)return e.state.isAuthor=!0},function(e){console.log("err when get this project: ",e)}),e.like=function(o,t){console.log(o,"clicks likeBtn of",t),e.state.isAuthor&&(console.log("likeEvent triggered"),n.like(t,o).then(function(e){console.log("res: ",e)},function(e){console.log("err when like/unlike: ",e)}))}}function profileSettingCtrl(e,o,t,n,r,l,c,i){console.log("profileSettingCtrl loaded"),t.userId==e.currentUser._id?e.updateUserData=angular.copy(e.currentUser):r.go("home"),e.init=function(){var e=i.$$path.includes("danger")||i.$$path.includes("request")||i.$$path.includes("privacy");e||r.go("profileSetting_general")},e.updateUserDataSubmitted=function(){var o=e.updateUserData._id,t=e.updateUserData;n.updateUserData(o,t).then(function(o){e.updateUserData=o.data,l.location.reload()},function(e){console.log("err when get update user data: ",e)})},e.photoUploading=!1,e.uploadFiles=function(o){e.photoUploading=!0;var o=o[0],t=e.currentUser._id;console.log("photo: ",o),o&&c.upload({url:"/api/upload/"+t,data:{newFile:o}}).then(function(e){console.log("res after upload: ",e.data),l.location.reload()},function(e){console.log("err when upload file: ",e)})}}function ppageCtrl(e,o,t,n,r,l,c,i){function a(){var e=i.$$path.includes("starred")||i.$$path.includes("followers");e||o.go("ppage_projects")}console.log("ppageCtrl loaded"),e.state={},e.state.isTheUser=!1,e.state.followStatus=!1;var s,u=n.userId;u==e.currentUser._id&&(e.state.isTheUser=!0),e.state.isTheUser?console.log("isTheUser"):console.log("is not TheUser"),e.init=function(){a()},l.getUserData(u).then(function(o){e.user=o.data,s=o.data,e.projects=o.data.projects.reverse(),console.log("cards here: ",o.data.projects),c(function(){p()},0)},function(e){console.log("err when get userData: ",e)}),e.createTime=function(e){return moment(e).fromNow()},e.follow=function(o,t){console.log("ffffff"),console.log(o,t),o!==t&&t==u&&(console.log("followEvent triggered"),l.follow(o,t).then(function(o){if(console.log("res: ",o),"follow"==o.data.eventType){console.log("check"),console.log("follwing: res, ",o.data);var t=o.data.follower;o.data.followingReceiver;e.user.followersList.push(t),p()}else if("unfollow"==o.data.eventType){console.log("check"),console.log("unfollwing: res, ",o.data);var n=(o.data.unfollower,o.data.unfollowingReceiver,e.user.followersList.indexOf(t));e.user.followersList.splice(n,1),p()}},function(e){console.log("err when follow/unfollow: ",e)}))};var p=function(){if(console.log("checkFollowStatus trigerred"),console.log("displayUser: ",s),s.followersList.length>0){var o=s.followersList;console.log("checked");for(var t in o)console.log("currentUser: ",e.currentUser._id),console.log("followersList[follower]._id: ",o[t]._id),o[t]._id==e.currentUser._id?e.state.followStatus=!0:e.state.followStatus=!1}else e.state.followStatus=!1}}function navCtrl(e,o,t,n,r,l,c,i,a,s,u){o.currentUser="",o.loginloading=!1,o.logoutloading=!1,r.hideNav=!1,r.createModal=!1,o.authenticate=function(e){o.loginloading=!0,t.authenticate(e).then(function(e){n.getCurrentUser().then(function(e){console.log("user logged in: ",e.data),o.currentUser=e.data,o.loginloading=!1,console.log("$scope.currentUser._id: ",o.currentUser._id),"home"==i.current.name?i.go("ppage",{userId:o.currentUser._id}):c.location.reload()},function(e){console.log("user is not logged in.")})},function(e){console.log("err when log user in: ",e)})},t.isAuthenticated()&&n.getCurrentUser().then(function(e){o.currentUser=e.data,console.log("navCtrl triggered and currentUser: ",o.currentUser)},function(e){console.log("user is not logged in.")}),o.isAuthenticated=function(){return t.isAuthenticated()},o.logout=function(){o.logoutloading=!0,t.logout(),l(function(){o.logoutloading=!1,c.location.reload()},0)},o.goppage=function(){console.log("$location.$$path: ",u.$$path),u.$$path.includes("projects")?c.location.reload():i.go("ppage",{userId:o.currentUser._id})},o.create=function(){o.projectInitalizing=!1,o.newProjectName="",o.newProjectPitch="",o.createModal=!0,l(function(){a("focusMe")},100)},o.createProject=function(){o.projectInitalizing=!0,console.log("create project called: ",o.newProjectName);var e={title:o.newProjectName,pitch:o.newProjectPitch};s.createOne(e).then(function(e){console.log("add new behavior[createNewProject]: ",e.data),l(function(){o.projectInitalizing=!1,o.createModal=!1,"ppage"==i.current.name?c.location.reload():i.go("ppage",{userId:o.currentUser._id})},1500*Math.random()+300)},function(e){console.log("err when create project: ",e)})}}function focusOn(){return function(e,o,t){e.$on("focusOn",function(e,n){n===t.focusOn&&o[0].focus()})}}function toolTip(){return function(e,o,t){angular.element(".tool-tip").on("click mouseleave",hideTooltip),angular.element(".tool-tip").on("mouseenter",showTooltip)}}function hideTooltip(){$(this).tooltip("hide")}function showTooltip(){$(this).tooltip("show")}angular.module("pinchApp",["ui.router","satellizer","ui.bootstrap","ngFileUpload","ngImgCrop"]).config(["$stateProvider","$urlRouterProvider","$authProvider",function(e,o,t){t.facebook({clientId:"298165113849366"}),e.state(home),o.otherwise("/")}]);var home={name:"home",url:"/",views:{main:{templateUrl:"/html/home.html",controller:"homeCtrl"}}};$(document).ready(init),Account.$inject=["$http"],Project.$inject=["$http"],focus.$inject=["$rootScope","$timeout"],angular.module("pinchApp").service("Account",Account).service("Project",Project).factory("focus",focus),navCtrl.$inject=["$http","$scope","$auth","Account","$rootScope","$timeout","$window","$state","focus","Project","$location"],ppageCtrl.$inject=["$scope","$state","$rootScope","$stateParams","Project","Account","$timeout","$location"],profileSettingCtrl.$inject=["$scope","$http","$stateParams","Account","$state","$window","Upload","$location"],projectpageCtrl.$inject=["$scope","$http","$stateParams","Project"],projectSettingCtrl.$inject=["$scope","$http","$stateParams","Project","$state","$location"],angular.module("pinchApp").controller("navCtrl",navCtrl).controller("homeCtrl",homeCtrl).controller("ppageCtrl",ppageCtrl).controller("profileSettingCtrl",profileSettingCtrl).controller("projectpageCtrl",projectpageCtrl).controller("projectSettingCtrl",projectSettingCtrl),angular.module("pinchApp").directive("focusOn",focusOn),angular.module("pinchApp").directive("toolTip",toolTip);
//# sourceMappingURL=data:application/json;base64,
